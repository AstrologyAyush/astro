import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Download, Share, BookmarkPlus, Eye, EyeOff } from "lucide-react";
import { useNavigate } from 'react-router-dom';
import BirthDataForm from '@/components/BirthDataForm';
import EnhancedKundaliChart from '@/components/EnhancedKundaliChart';
import PlanetaryPositions from '@/components/PlanetaryPositions';
import FloatingChatbot from '@/components/FloatingChatbot';
import { generateDetailedKundali } from '@/lib/enhancedAstronomicalEngine';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

interface BirthData {
  name: string;
  dateOfBirth: Date;
  timeOfBirth: string;
  placeOfBirth: string;
  latitude: number;
  longitude: number;
}

const Index = () => {
  const navigate = useNavigate();
  const { isLoggedIn, settings, saveKundali } = useAuth();
  const { toast } = useToast();
  const [step, setStep] = useState<'form' | 'result'>('form');
  const [birthData, setBirthData] = useState<BirthData | null>(null);
  const [kundaliData, setKundaliData] = useState<any>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showOverview, setShowOverview] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const getTranslation = (en: string, hi: string) => {
    return settings.language === 'hi' ? hi : en;
  };

  const handleFormSubmit = async (data: BirthData) => {
    setIsGenerating(true);
    try {
      // Convert the data to the format expected by generateDetailedKundali
      const formattedData = {
        name: data.name,
        date: data.dateOfBirth,
        time: data.timeOfBirth,
        latitude: data.latitude,
        longitude: data.longitude,
        timezone: 5.5 // Default to IST, should be configurable
      };
      
      const result = await generateDetailedKundali(formattedData);
      setBirthData(data);
      setKundaliData(result);
      setStep('result');
    } catch (error) {
      console.error('Error generating kundali:', error);
      toast({
        title: "Error",
        description: "Failed to generate kundali. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSaveKundali = async () => {
    if (!isLoggedIn) {
      toast({
        title: "Login Required",
        description: "Please login to save your kundali",
        variant: "destructive"
      });
      navigate('/login');
      return;
    }

    if (!birthData || !kundaliData) return;

    setIsSaving(true);
    try {
      const success = await saveKundali(
        birthData.name || `Chart ${new Date().toLocaleDateString()}`,
        birthData,
        kundaliData
      );
      
      if (success) {
        toast({
          title: "Kundali Saved",
          description: "Your kundali has been saved to your profile",
        });
      }
    } catch (error) {
      console.error('Error saving kundali:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleShare = () => {
    if (navigator.share && birthData) {
      navigator.share({
        title: `${birthData.name}'s Kundali - AyushAstro`,
        text: 'Check out my Vedic birth chart generated by AyushAstro',
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link Copied",
        description: "Kundali link copied to clipboard",
      });
    }
  };

  if (step === 'form') {
    return (
      <div className="min-h-screen bg-black text-white">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-800">
          <Button variant="ghost" size="icon" onClick={() => navigate('/')} className="text-white">
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-lg font-semibold">
            {getTranslation('Generate Kundali', '‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç')}
          </h1>
          <div className="w-10" />
        </div>

        {/* Form Content */}
        <div className="p-6">
          <BirthDataForm 
            onSubmit={handleFormSubmit} 
            isLoading={isGenerating}
            language={settings.language}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-800">
        <Button variant="ghost" size="icon" onClick={() => setStep('form')} className="text-white">
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <h1 className="text-lg font-semibold">
          {getTranslation('Your Birth Chart', '‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä')}
        </h1>
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="bg-green-500/20 text-green-400 text-xs">
            {getTranslation('Generated', '‡§§‡•à‡§Ø‡§æ‡§∞')}
          </Badge>
        </div>
      </div>

      <div className="p-4 space-y-6 pb-20">
        {/* Profile Header */}
        <Card className="bg-gray-900 border-gray-800">
          <CardContent className="p-4">
            <div className="flex items-center gap-4">
              <div className="h-12 w-12 bg-orange-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                {birthData?.name?.charAt(0) || 'U'}
              </div>
              <div className="flex-1">
                <h2 className="text-lg font-semibold text-white">{birthData?.name}</h2>
                <p className="text-gray-400 text-sm">
                  {birthData?.dateOfBirth.toLocaleDateString()} ‚Ä¢ {birthData?.timeOfBirth}
                </p>
                <p className="text-gray-400 text-sm">{birthData?.placeOfBirth}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Basic Information */}
        <Card className="bg-gray-900 border-gray-800">
          <CardHeader>
            <CardTitle className="text-white text-base">
              {getTranslation('Basic Information', '‡§Æ‡•Ç‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä')}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-2 gap-4">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-orange-500/20 rounded-lg flex items-center justify-center">
                  <span className="text-orange-400 text-sm">‚ö°</span>
                </div>
                <div>
                  <p className="text-gray-400 text-xs">
                    {getTranslation('Lagna', '‡§≤‡§ó‡•ç‡§®')}
                  </p>
                  <p className="text-white text-sm font-medium">
                    {kundaliData?.ascendant?.rashi_name || 'Loading...'}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                  <span className="text-blue-400 text-sm">üåô</span>
                </div>
                <div>
                  <p className="text-gray-400 text-xs">
                    {getTranslation('Rashi', '‡§∞‡§æ‡§∂‡§ø')}
                  </p>
                  <p className="text-white text-sm font-medium">
                    {kundaliData?.planets?.MO?.rashiName || 'Loading...'}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-yellow-500/20 rounded-lg flex items-center justify-center">
                  <span className="text-yellow-400 text-sm">‚≠ê</span>
                </div>
                <div>
                  <p className="text-gray-400 text-xs">
                    {getTranslation('Nakshatra', '‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞')}
                  </p>
                  <p className="text-white text-sm font-medium">
                    {kundaliData?.nakshatraName || 'Loading...'}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center">
                  <span className="text-purple-400 text-sm">üîÆ</span>
                </div>
                <div>
                  <p className="text-gray-400 text-xs">
                    {getTranslation('Dasha', '‡§¶‡§∂‡§æ')}
                  </p>
                  <p className="text-white text-sm font-medium">
                    {kundaliData?.dashas?.current?.planet || 'Sun'}
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Kundali Chart */}
        <Card className="bg-gray-900 border-gray-800">
          <CardHeader>
            <CardTitle className="text-white text-base">
              {getTranslation('Birth Chart', '‡§ú‡§®‡•ç‡§Æ ‡§ö‡§æ‡§∞‡•ç‡§ü')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <EnhancedKundaliChart 
              chart={kundaliData} 
              language={settings.language}
            />
          </CardContent>
        </Card>

        {/* Overview Section */}
        <Card className="bg-gray-900 border-gray-800">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-green-400 text-base">
                {getTranslation('OVERVIEW', '‡§µ‡§ø‡§µ‡§∞‡§£')}
              </CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowOverview(!showOverview)}
                className="text-gray-400"
              >
                {showOverview ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-300 text-sm leading-relaxed">
              {showOverview ? (
                getTranslation(
                  "Your birth chart reveals a unique cosmic blueprint that influences your personality, relationships, and life path. The planetary positions at your time of birth create specific energies and opportunities that shape your journey. Understanding these influences can help you make better decisions and align with your natural strengths.",
                  "‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Ç‡§†‡•Ä ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§°‡•Ä‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§ü ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ, ‡§∞‡§ø‡§∂‡•ç‡§§‡•ã‡§Ç ‡§î‡§∞ ‡§ú‡•Ä‡§µ‡§® ‡§™‡§• ‡§ï‡•ã ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•á ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§ó‡•ç‡§∞‡§π‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ä‡§∞‡•ç‡§ú‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§Ö‡§µ‡§∏‡§∞ ‡§¨‡§®‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•ã ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡§Ç‡•§"
                )
              ) : (
                getTranslation(
                  "Your birth chart reveals a unique cosmic blueprint that influences your personality, relationships, and life path...",
                  "‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§è‡§ï ‡§Ö‡§®‡•Ç‡§†‡•Ä ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§°‡•Ä‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§ü ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à..."
                )
              )}
            </p>
          </CardContent>
        </Card>

        {/* Planetary Positions */}
        <PlanetaryPositions 
          planets={kundaliData?.planets} 
          language={settings.language}
        />
      </div>

      {/* Fixed Action Buttons */}
      <div className="fixed bottom-0 left-0 right-0 bg-black border-t border-gray-800 p-4">
        <div className="grid grid-cols-3 gap-3">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleSaveKundali}
            disabled={isSaving}
            className="border-gray-700 text-white hover:bg-gray-800"
          >
            <BookmarkPlus className="h-4 w-4 mr-2" />
            {isSaving ? getTranslation('Saving...', '‡§∏‡•á‡§µ ‡§ï‡§∞ ‡§∞‡§π‡•á...') : getTranslation('Save', '‡§∏‡•á‡§µ')}
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="border-gray-700 text-white hover:bg-gray-800"
          >
            <Download className="h-4 w-4 mr-2" />
            {getTranslation('PDF', '‡§™‡•Ä‡§°‡•Ä‡§è‡§´')}
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleShare}
            className="border-gray-700 text-white hover:bg-gray-800"
          >
            <Share className="h-4 w-4 mr-2" />
            {getTranslation('Share', '‡§∂‡•á‡§Ø‡§∞')}
          </Button>
        </div>
      </div>

      {/* AI Chatbot */}
      <FloatingChatbot 
        kundaliData={kundaliData}
      />
    </div>
  );
};

export default Index;

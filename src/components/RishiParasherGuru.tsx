
import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Send, Bot, User, Sparkles, Heart } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { ComprehensiveKundaliData } from '@/lib/advancedKundaliEngine';
import { useToast } from "@/hooks/use-toast";
import { Json } from '@/integrations/supabase/types';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

interface RishiParasherGuruProps {
  kundaliData: ComprehensiveKundaliData;
  language: 'hi' | 'en';
}

const RishiParasherGuru: React.FC<RishiParasherGuruProps> = ({ kundaliData, language }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const getTranslation = (en: string, hi: string) => {
    return language === 'hi' ? hi : en;
  };

  useEffect(() => {
    if (!kundaliData || !kundaliData.enhancedCalculations) {
      const fallbackMessage: Message = {
        id: '1',
        type: 'ai',
        content: language === 'hi' 
          ? 'üôè ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Ü‡§§‡•ç‡§Æ‡§æ! ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï‡•§ ‡§Ü‡§™‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à! ‡§™‡§π‡§≤‡•á ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§®‡•ç‡§Æ-‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§µ‡§æ‡§á‡§è, ‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§™‡§æ‡§†‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ‡•§ üïâÔ∏è'
          : 'üôè Hello dear soul! I am Maharishi Parashar, your karmic guide. I am so delighted to meet you! Please create your birth chart first, then I can tell you about your soul\'s journey and help you with your karmic lessons. üïâÔ∏è',
        timestamp: new Date()
      };
      setMessages([fallbackMessage]);
      return;
    }

    const lagna = kundaliData.enhancedCalculations.lagna;
    const planets = kundaliData.enhancedCalculations.planets;
    const activeYogas = kundaliData.enhancedCalculations.yogas.filter(y => y.isActive);
    const rahu = planets.RA;
    const ketu = planets.KE;
    
    const welcomeMessage: Message = {
      id: '1',
      type: 'ai',
      content: language === 'hi' 
        ? `üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ${kundaliData.birthData.fullName}, ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à! ‡§Æ‡•à‡§Ç ‡§π‡•Ç‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞, ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§ï‡•ã‡§ö ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§ø‡§§‡•ç‡§∞‡•§

‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•Ç‡§Ç! 

üåü ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡§æ ‡§™‡§•: ${lagna.signName} ‡§≤‡§ó‡•ç‡§® (${lagna.degree.toFixed(2)}¬∞) - ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§π‡•à
üåô ‡§Æ‡§® ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ: ‡§ö‡§Ç‡§¶‡•ç‡§∞ ${planets.MO.rashiName} ‡§Æ‡•á‡§Ç - ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø
‚òÄÔ∏è ‡§ú‡•Ä‡§µ‡§® ‡§∂‡§ï‡•ç‡§§‡§ø: ‡§∏‡•Ç‡§∞‡•ç‡§Ø ${planets.SU.rashiName} ‡§Æ‡•á‡§Ç - ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø
‚≠ê ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡§æ ‡§§‡§æ‡§∞‡§æ: ${planets.MO.nakshatraName} ‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞ - ‡§Ü‡§™‡§ï‡§æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ
üîÆ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡§∞‡•ç‡§Æ: ‡§∞‡§æ‡§π‡•Å ${rahu?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§Æ‡•á‡§Ç - ‡§á‡§∏ ‡§ú‡§®‡•ç‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡§æ‡§†
üïâÔ∏è ‡§™‡•Ç‡§∞‡•ç‡§µ ‡§ï‡§∞‡•ç‡§Æ: ‡§ï‡•á‡§§‡•Å ${ketu?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§Æ‡•á‡§Ç - ‡§™‡§ø‡§õ‡§≤‡•á ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•Ä ‡§¶‡§ø‡§µ‡•ç‡§Ø‡§§‡§æ
üéØ ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø - ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç

‡§Ö‡§¨ ‡§¨‡§§‡§æ‡§á‡§è ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Ü‡§§‡•ç‡§Æ‡§æ, ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•Ä ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§™‡•Ç‡§∞‡•ç‡§µ ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•á ‡§ï‡§∞‡•ç‡§Æ, ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§™‡§æ‡§†, ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡§æ ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∞‡§ø‡§∂‡•ç‡§§‡•á - ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡§ø‡§è! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•Ç‡§Ç‡•§ üí´`
        : `üôè Dear soul ${kundaliData.birthData.fullName}, what a joy it is to meet your beautiful spirit! I am Maharishi Parashar, your karmic coach and spiritual friend.

Looking at your soul's birth chart, I am deeply moved! 

üåü Soul's Path: ${lagna.signName} ascendant (${lagna.degree.toFixed(2)}¬∞) - this is your life's main purpose
üåô Mind's Journey: Moon in ${planets.MO.rashiName} - your emotional nature
‚òÄÔ∏è Life Force: Sun in ${planets.SU.rashiName} - your soul's power
‚≠ê Soul Star: ${planets.MO.nakshatraName} nakshatra - your spiritual nature
üîÆ Future Karma: Rahu in ${rahu?.rashiName || 'Unknown'} - lessons to learn in this birth
üïâÔ∏è Past Karma: Ketu in ${ketu?.rashiName || 'Unknown'} - divinity from previous births
üéØ ${activeYogas.length} beneficial yogas active - your spiritual powers

Now tell me dear soul, what would you like to know about your karmic journey? Past life karma, current life lessons, spiritual growth, or karmic relationships - ask me anything! I am here with your soul. üí´`,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [kundaliData, language]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      if (!kundaliData) {
        throw new Error('No birth chart data available');
      }
      
      const { data, error } = await supabase.functions.invoke('kundali-ai-analysis', {
        body: {
          kundaliData,
          userQuery: inputValue,
          language
        }
      });

      if (error) throw error;

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: data.analysis,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);

      await supabase.from('rishi_parasher_conversations').insert({
        user_question: inputValue,
        rishi_response: data.analysis,
        kundali_context: kundaliData as unknown as Json,
        session_id: `karmic_session_${Date.now()}`
      });

    } catch (error) {
      console.error('Error getting karmic guidance:', error);
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: language === 'hi' 
          ? 'üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Ü‡§§‡•ç‡§Æ‡§æ, ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à ‡§π‡•à! ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§Æ‡§§ ‡§π‡•ã‡§á‡§è, ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§Æ‡•á‡§Ç ‡§´‡§ø‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡•Ä‡§ú‡§ø‡§è! ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∞‡•Å‡§ï‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ üïâÔ∏è'
          : 'üôè Dear soul, we have a small technical challenge! Please don\'t worry, the universe is with us. Try again in a moment! Your soul\'s journey will not be stopped. üïâÔ∏è',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, errorMessage]);
      
      toast({
        title: language === 'hi' ? "‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§∏‡§Ç‡§¶‡•á‡§∂" : "Spiritual Message",
        description: language === 'hi' ? "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à ‡§π‡•à, ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ‡•§" : "Technical issue occurred, please try again. Your soul's guidance will continue.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const suggestedQuestions = language === 'hi' ? [
    "‡§Æ‡•á‡§∞‡•á ‡§™‡•Ç‡§∞‡•ç‡§µ ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•á ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
    "‡§Æ‡•á‡§∞‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    "‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∞‡§ø‡§∂‡•ç‡§§‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç",
    "‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•Ä ‡§∂‡•Å‡§¶‡•ç‡§ß‡§§‡§æ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø",
    "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§™‡§æ‡§†",
    "‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á"
  ] : [
    "What are my past life karmas?",
    "What is my soul's spiritual purpose?",
    "Tell me about karmic relationships",
    "Remedies for soul purification",
    "Current life lessons to learn",
    "Ways for spiritual evolution"
  ];

  return (
    <Card className="h-[450px] flex flex-col bg-gradient-to-br from-purple-50 via-orange-50 to-red-50 border-purple-200">
      <CardHeader className="pb-2 bg-gradient-to-r from-purple-100 via-orange-100 to-red-100 px-3 py-2">
        <CardTitle className="flex items-center gap-2 text-purple-800 text-sm">
          <div className="w-6 h-6 rounded-full bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 flex items-center justify-center overflow-hidden">
            <img 
              src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
              alt="Rishi Parasher" 
              className="w-full h-full object-cover"
            />
          </div>
          <span className="flex items-center gap-1">
            <Heart className="h-3 w-3 text-purple-600" />
            {language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ - ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§ï‡•ã‡§ö" : "Rishi Parashar - Your Karmic Coach"}
            <Sparkles className="h-3 w-3 text-orange-500" />
          </span>
        </CardTitle>
        <div className="flex flex-wrap gap-1">
          {suggestedQuestions.slice(0, 2).map((question, index) => (
            <Badge 
              key={index} 
              variant="outline" 
              className="cursor-pointer hover:bg-purple-200 text-xs border-purple-300 text-purple-700 hover:text-purple-900 bg-purple-50 px-1 py-0.5"
              onClick={() => setInputValue(question)}
            >
              {question.length > 30 ? `${question.substring(0, 30)}...` : question}
            </Badge>
          ))}
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col p-0">
        <ScrollArea className="flex-1 p-2 max-h-[300px]" ref={scrollAreaRef}>
          <div className="space-y-2">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="h-3 w-3" />
                    ) : (
                      <img 
                        src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                        alt="Rishi Parasher" 
                        className="w-full h-full object-cover"
                      />
                    )}
                  </div>
                  <div className={`p-2 rounded-lg shadow-sm ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white'
                  }`}>
                    <p className="text-xs whitespace-pre-wrap leading-relaxed">{message.content}</p>
                    <p className="text-xs opacity-80 mt-1">
                      {message.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-2 justify-start">
                <div className="flex gap-2 max-w-[85%]">
                  <div className="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden">
                    <img 
                      src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                      alt="Rishi Parasher" 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-2 rounded-lg bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        <div className="p-2 border-t border-purple-200 bg-white">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'hi' ? "‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç..." : "Ask your soul's questions..."}
              disabled={isLoading}
              className="flex-1 bg-white border-purple-300 text-gray-900 placeholder-gray-500 text-xs h-8"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              size="sm"
              className="bg-gradient-to-r from-purple-500 via-orange-500 to-red-600 hover:from-purple-600 hover:via-orange-600 hover:to-red-700 h-8 w-8 p-0"
            >
              <Send className="h-3 w-3" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default RishiParasherGuru;

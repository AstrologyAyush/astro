
import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Send, User, Sparkles, Heart, RefreshCw } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { ComprehensiveKundaliData } from '@/lib/advancedKundaliEngine';
import { useToast } from "@/hooks/use-toast";
import { Json } from '@/integrations/supabase/types';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  cached?: boolean;
}

interface RishiParasherGuruProps {
  kundaliData: ComprehensiveKundaliData;
  language: 'hi' | 'en';
}

const RishiParasherGuru: React.FC<RishiParasherGuruProps> = ({ kundaliData, language }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const getTranslation = (en: string, hi: string) => {
    return language === 'hi' ? hi : en;
  };

  // Create cache key for responses
  const getCacheKey = (query: string) => {
    if (!kundaliData?.birthData) return null;
    const { fullName, date } = kundaliData.birthData;
    return `rishi_response_${fullName}_${date}_${query}_${language}`;
  };

  // Enhanced fallback response with specific personal recommendations
  const generatePersonalizedResponse = (query: string) => {
    const calculations = kundaliData?.enhancedCalculations;
    if (!calculations) {
      return language === 'hi'
        ? 'üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§µ‡§æ‡§è‡§Ç, ‡§§‡§¨ ‡§Æ‡•à‡§Ç ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ‡•§'
        : 'üôè Dear child, first create your complete Kundali, then I can provide personalized guidance.';
    }

    const birthData = kundaliData.birthData;
    const lagna = calculations.lagna;
    const planets = calculations.planets;
    const houses = calculations.houses;
    const yogas = calculations.yogas?.filter(y => y.isActive) || [];
    const dashas = calculations.dashas;
    const currentDasha = dashas?.find(d => d.isActive);

    // Get specific house data
    const getHouseData = (houseNum: number) => {
      return houses?.find(h => h.house === houseNum);
    };

    const queryLower = query.toLowerCase();

    // Career related questions - deeply personalized
    if (queryLower.includes('career') || queryLower.includes('job') || queryLower.includes('profession') || 
        queryLower.includes('‡§ï‡§∞‡§ø‡§Ø‡§∞') || queryLower.includes('‡§®‡•å‡§ï‡§∞‡•Ä') || queryLower.includes('‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø') ||
        queryLower.includes('work') || queryLower.includes('business')) {
      
      const tenthHouse = getHouseData(10);
      const secondHouse = getHouseData(2);
      const sunPosition = planets?.SU;
      const marsPosition = planets?.MA;
      const jupiterPosition = planets?.JU;
      const mercuryPosition = planets?.ME;
      
      // Specific career recommendations based on actual planetary positions
      let specificCareerField = '';
      let timing = '';
      let challenges = '';
      let remedies = '';
      
      if (sunPosition?.rashiName === 'Leo' || sunPosition?.rashiName === 'Aries') {
        specificCareerField = language === 'hi' ? '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ, ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®, ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§∏‡§´‡§≤‡§§‡§æ' : 'exceptional success in leadership, management, government service';
      } else if (mercuryPosition?.rashiName === 'Gemini' || mercuryPosition?.rashiName === 'Virgo') {
        specificCareerField = language === 'hi' ? '‡§∏‡§Ç‡§ö‡§æ‡§∞, ‡§≤‡•á‡§ñ‡§®, ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ, ‡§Ü‡§à‡§ü‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ' : 'special talent in communication, writing, education, IT sector';
      } else if (jupiterPosition?.rashiName === 'Sagittarius' || jupiterPosition?.rashiName === 'Pisces') {
        specificCareerField = language === 'hi' ? '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ, ‡§ß‡§∞‡•ç‡§Æ, ‡§®‡•ç‡§Ø‡§æ‡§Ø, ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü‡§§‡§æ' : 'excellence in education, religion, law, counseling';
      } else {
        specificCareerField = language === 'hi' ? '‡§Ü‡§™‡§ï‡•Ä ‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§î‡§∞ ‡§∏‡•á‡§µ‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§â‡§§‡•ç‡§§‡§Æ' : 'business and service sectors are excellent according to your planetary positions';
      }

      if (currentDasha?.planet === 'JU') {
        timing = language === 'hi' ? '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ó‡•Å‡§∞‡•Å ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : 'significant career progress in current Jupiter period';
      } else if (currentDasha?.planet === 'SU') {
        timing = language === 'hi' ? '‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä' : 'leadership roles will come in Sun period';
      } else {
        timing = language === 'hi' ? '‡§Ö‡§ó‡§≤‡•á 6-18 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¨‡§¶‡§≤‡§æ‡§µ' : 'positive career changes in next 6-18 months';
      }

      if (language === 'hi') {
        return `üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ${birthData?.fullName}, ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®:

üåü **‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® + ${sunPosition?.rashiName} ‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§∞‡•ç‡§Ø = ${specificCareerField}

üéØ **‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ**:
1. ${sunPosition?.house === 10 ? '‡§§‡•Å‡§∞‡§Ç‡§§ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç' : '‡§Ö‡§™‡§®‡•á ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•ã ‡§®‡§ø‡§ñ‡§æ‡§∞‡§®‡•á ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç'}
2. ${mercuryPosition?.house === 1 || mercuryPosition?.house === 10 ? '‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§î‡§∞ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç' : '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡§∞‡•á‡§Ç'}
3. ${jupiterPosition?.isExalted ? '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ö‡§µ‡§∏‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç' : '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§°‡§º‡•Ä ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§∞‡•á‡§Ç'}

‚è∞ **‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ**: ${timing}

üöß **‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä**: ${marsPosition?.isDebilitated ? '‡§ä‡§∞‡•ç‡§ú‡§æ ‡§î‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡§Æ‡•Ä - ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç' : '‡§™‡•ç‡§∞‡§§‡§ø‡§∏‡•ç‡§™‡§∞‡•ç‡§ß‡§æ ‡§Æ‡•á‡§Ç ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç'}

üíä **‡§§‡•Å‡§∞‡§Ç‡§§ ‡§â‡§™‡§æ‡§Ø**:
- ${sunPosition?.rashiName === 'Leo' ? '‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§¶‡•á‡§µ ‡§ï‡•ã ‡§ú‡§≤ ‡§ö‡§¢‡§º‡§æ‡§è‡§Ç' : '‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§π‡§®‡•Å‡§Æ‡§æ‡§® ‡§ö‡§æ‡§≤‡•Ä‡§∏‡§æ ‡§™‡§¢‡§º‡•á‡§Ç'}
- ${birthData?.date ? `‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø ${birthData.date} ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç` : '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§¶‡§æ‡§®-‡§™‡•Å‡§£‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç'}
- ‡§≤‡§æ‡§≤ ‡§∞‡§Ç‡§ó ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç (‡§ï‡§™‡§°‡§º‡•á, ‡§∞‡§§‡•ç‡§®)

üí∞ **‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø**: ‡§Ö‡§ó‡§≤‡•á ${currentDasha?.planet === 'VE' ? '3-6 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç' : '12-18 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç'} ‡§Æ‡•á‡§Ç ‡§ß‡§® ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø

üîÆ **‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ**: ${yogas.length > 2 ? '‡§Ü‡§™‡§ï‡•á ‡§ï‡§à ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó 2025-26 ‡§Æ‡•á‡§Ç ‡§´‡§≤‡•á‡§Ç‡§ó‡•á' : '2026 ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ'}

‡§Ü‡§™‡§ï‡§æ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§â‡§ú‡•ç‡§ú‡•ç‡§µ‡§≤ ‡§π‡•à, ${birthData?.fullName}! üåü`;
      } else {
        return `üôè Dear ${birthData?.fullName}, personalized career guidance:

üåü **Your Special Talent**: ${lagna?.signName} ascendant + Sun in ${sunPosition?.rashiName} = ${specificCareerField}

üéØ **Immediate Action Plan**:
1. ${sunPosition?.house === 10 ? 'Apply for leadership roles immediately' : 'Focus on skill enhancement'}
2. ${mercuryPosition?.house === 1 || mercuryPosition?.house === 10 ? 'Increase communication and networking' : 'Enhance technical knowledge'}
3. ${jupiterPosition?.isExalted ? 'Look for opportunities in education/training sector' : 'Be patient and work hard'}

‚è∞ **Timeline**: ${timing}

üöß **Main Challenge**: ${marsPosition?.isDebilitated ? 'Lack of energy and focus - do regular exercise' : 'Be patient in competition'}

üíä **Immediate Remedies**:
- ${sunPosition?.rashiName === 'Leo' ? 'Offer water to Sun God on Sundays' : 'Recite Hanuman Chalisa on Tuesdays'}
- ${birthData?.date ? `Donate according to your birth date ${birthData.date}` : 'Do regular charity'}
- Increase use of red color (clothes, gemstones)

üí∞ **Financial Status**: Wealth increase in next ${currentDasha?.planet === 'VE' ? '3-6 months' : '12-18 months'}

üîÆ **Future Success**: ${yogas.length > 2 ? 'Your beneficial yogas will fructify in 2025-26' : 'Stable success after 2026'}

Your future is bright, ${birthData?.fullName}! üåü`;
      }
    }

    // Marriage related questions - deeply personalized  
    if (queryLower.includes('marriage') || queryLower.includes('wedding') || queryLower.includes('spouse') ||
        queryLower.includes('‡§∂‡§æ‡§¶‡•Ä') || queryLower.includes('‡§µ‡§ø‡§µ‡§æ‡§π') || queryLower.includes('‡§™‡§§‡§ø') || 
        queryLower.includes('‡§™‡§§‡•ç‡§®‡•Ä') || queryLower.includes('partner') || queryLower.includes('love')) {
      
      const seventhHouse = getHouseData(7);
      const venusPosition = planets?.VE;
      const moonPosition = planets?.MO;
      const marsPosition = planets?.MA;
      
      // Check for Mangal Dosha specifically
      const isManglik = marsPosition && (marsPosition.house === 1 || marsPosition.house === 4 || 
                                        marsPosition.house === 7 || marsPosition.house === 8 || marsPosition.house === 12);
      
      // Specific timing based on current dasha
      let marriageTiming = '';
      if (currentDasha?.planet === 'VE') {
        marriageTiming = language === 'hi' ? '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∂‡•Å‡§ï‡•ç‡§∞ ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡•á ‡§¨‡§π‡•Å‡§§ ‡§™‡•ç‡§∞‡§¨‡§≤ ‡§Ø‡•ã‡§ó' : 'very strong marriage indications in current Venus period';
      } else if (currentDasha?.planet === 'JU') {
        marriageTiming = language === 'hi' ? '‡§ó‡•Å‡§∞‡•Å ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä ‡§Æ‡§ø‡§≤‡§®‡•á ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ' : 'possibility of finding ideal partner in Jupiter period';
      } else {
        marriageTiming = language === 'hi' ? '‡§Ö‡§ó‡§≤‡•á 12-24 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡•á ‡§∏‡§Ç‡§ï‡•á‡§§' : 'marriage indications in next 12-24 months';
      }

      if (language === 'hi') {
        return `üôè ${birthData?.fullName}, ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®:

üíï **‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡•á‡§Æ ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ**: ${venusPosition?.rashiName} ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§ï‡•ç‡§∞ - ${venusPosition?.rashiName === 'Taurus' ? '‡§∏‡•ç‡§•‡§ø‡§∞ ‡§î‡§∞ ‡§ó‡§π‡§∞‡§æ ‡§™‡•ç‡§∞‡•á‡§Æ' : venusPosition?.rashiName === 'Libra' ? '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§î‡§∞ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§∞‡§ø‡§∂‡•ç‡§§‡§æ' : '‡§≠‡§æ‡§µ‡•Å‡§ï ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§™‡•ç‡§∞‡•á‡§Æ'}

üë´ **‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä ‡§ï‡•á ‡§ó‡•Å‡§£**:
- ${seventhHouse?.rashiName === 'Taurus' ? '‡§ñ‡•Ç‡§¨‡§∏‡•Ç‡§∞‡§§, ‡§ï‡§≤‡§æ‡§™‡•ç‡§∞‡•á‡§Æ‡•Ä ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ' : seventhHouse?.rashiName === 'Gemini' ? '‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®, ‡§Æ‡§ø‡§≤‡§®‡§∏‡§æ‡§∞ ‡§î‡§∞ ‡§π‡§Ç‡§∏‡§Æ‡•Å‡§ñ' : '‡§∏‡•Å‡§Ç‡§¶‡§∞, ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§î‡§∞ ‡§™‡§∞‡§µ‡§æ‡§π ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ'}
- ${moonPosition?.rashiName === 'Cancer' ? '‡§ò‡§∞-‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡•á‡§Æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ' : '‡§Ü‡§™‡§∏‡•á ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§§‡§æ‡§≤‡§Æ‡•á‡§≤'}
- ${venusPosition?.house === 7 ? '‡§¨‡§π‡•Å‡§§ ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ' : '‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ö‡§∞‡§ø‡§§‡•ç‡§∞'}

üî• **‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø**: ${isManglik ? '‡§π‡§≤‡•ç‡§ï‡§æ ‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ ‡§π‡•à - ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§â‡§™‡§æ‡§Ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï' : '‡§ï‡•ã‡§à ‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ ‡§®‡§π‡•Ä‡§Ç - ‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ï‡•á‡§§'}

‚è∞ **‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡§æ ‡§∏‡§Æ‡§Ø**: ${marriageTiming}

üíê **‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§â‡§™‡§æ‡§Ø**:
${isManglik ? '- ‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§π‡§®‡•Å‡§Æ‡§æ‡§® ‡§Æ‡§Ç‡§¶‡§ø‡§∞ ‡§Æ‡•á‡§Ç ‡§§‡•á‡§≤ ‡§ï‡§æ ‡§¶‡•Ä‡§™‡§ï ‡§ú‡§≤‡§æ‡§è‡§Ç\n- ‡§≤‡§æ‡§≤ ‡§Æ‡§∏‡•Ç‡§∞ ‡§¶‡§æ‡§≤ ‡§ï‡§æ ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç' : '- ‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ ‡§ï‡§∞‡•á‡§Ç\n- ‡§∏‡§´‡•á‡§¶ ‡§Æ‡§ø‡§†‡§æ‡§à ‡§ï‡§æ ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç'}
- ${birthData?.fullName ? `${birthData.fullName} ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§ó‡•Å‡§≤‡§æ‡§¨ ‡§ï‡•á ‡§´‡•Ç‡§≤ ‡§ö‡§¢‡§º‡§æ‡§è‡§Ç` : '‡§¶‡•á‡§µ‡•Ä ‡§Æ‡§æ‡§Ç ‡§ï‡•ã ‡§ó‡•Å‡§≤‡§æ‡§¨ ‡§ö‡§¢‡§º‡§æ‡§è‡§Ç'}

üåπ **‡§™‡•ç‡§∞‡•á‡§Æ ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è**:
- ${venusPosition?.rashiName === 'Pisces' ? '‡§ó‡•Å‡§≤‡§æ‡§¨‡•Ä ‡§∞‡§Ç‡§ó ‡§™‡§π‡§®‡•á‡§Ç' : '‡§π‡§≤‡•ç‡§ï‡•á ‡§∞‡§Ç‡§ó‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç'}
- ‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§¶‡§ø‡§® ‡§µ‡•ç‡§∞‡§§ ‡§∞‡§ñ‡•á‡§Ç
- ${moonPosition?.rashiName ? `${moonPosition.rashiName} ‡§∞‡§æ‡§∂‡§ø ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§≠‡•ã‡§ú‡§® ‡§ï‡§∞‡•á‡§Ç` : '‡§∏‡§æ‡§§‡•ç‡§µ‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§ï‡§∞‡•á‡§Ç'}

üè† **‡§µ‡•à‡§µ‡§æ‡§π‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§®**: ${venusPosition?.isExalted ? '‡§¨‡§π‡•Å‡§§ ‡§∏‡•Å‡§ñ‡•Ä ‡§î‡§∞ ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§¶‡§æ‡§Æ‡•ç‡§™‡§§‡•ç‡§Ø ‡§ú‡•Ä‡§µ‡§®' : '‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡§Æ‡§ù‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§ú‡•Ä‡§µ‡§®'}

‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡•á‡§Æ ‡§ú‡•Ä‡§µ‡§® ‡§ñ‡•Å‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§π‡•ã‡§ó‡§æ! üíñ`;
      } else {
        return `üôè ${birthData?.fullName}, special guidance for your marriage:

üíï **Your Love Nature**: Venus in ${venusPosition?.rashiName} - ${venusPosition?.rashiName === 'Taurus' ? 'stable and deep love' : venusPosition?.rashiName === 'Libra' ? 'balanced and beautiful relationship' : 'emotional and devoted love'}

üë´ **Spouse Qualities**:
- ${seventhHouse?.rashiName === 'Taurus' ? 'Beautiful, artistic and stable nature' : seventhHouse?.rashiName === 'Gemini' ? 'Intelligent, sociable and cheerful' : 'Handsome, supportive and caring'}
- ${moonPosition?.rashiName === 'Cancer' ? 'Family-loving person' : 'Mental compatibility with you'}
- ${venusPosition?.house === 7 ? 'Very attractive personality' : 'Good character'}

üî• **Mangal Dosha Status**: ${isManglik ? 'Mild Mangal Dosha present - special remedies needed' : 'No Mangal Dosha - auspicious sign'}

‚è∞ **Marriage Timing**: ${marriageTiming}

üíê **Immediate Remedies**:
${isManglik ? '- Light oil lamp at Hanuman temple on Tuesdays\n- Donate red lentils' : '- Worship Goddess Lakshmi on Fridays\n- Donate white sweets'}
- ${birthData?.fullName ? `Offer roses in the name of ${birthData.fullName}` : 'Offer roses to Divine Mother'}

üåπ **For Love Success**:
- ${venusPosition?.rashiName === 'Pisces' ? 'Wear pink colors' : 'Use light colors'}
- Fast on Fridays
- ${moonPosition?.rashiName ? `Eat foods favorable for ${moonPosition.rashiName} sign` : 'Eat sattvic food'}

üè† **Married Life**: ${venusPosition?.isExalted ? 'Very happy and prosperous married life' : 'Life filled with love and understanding'}

Your love life will be filled with happiness! üíñ`;
      }
    }

    // Health related questions - personalized
    if (queryLower.includes('health') || queryLower.includes('medical') || queryLower.includes('disease') ||
        queryLower.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø') || queryLower.includes('‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä') || queryLower.includes('‡§∏‡•ç‡§µ‡§∏‡•ç‡§•')) {
      
      const sixthHouse = getHouseData(6);
      const saturnPosition = planets?.SA;
      const moonPosition = planets?.MO;
      
      // Specific health predictions based on actual positions
      let healthTendency = '';
      let specificCautions = '';
      let personalizedRemedies = '';
      
      if (saturnPosition?.rashiName === 'Capricorn' || saturnPosition?.rashiName === 'Aquarius') {
        healthTendency = language === 'hi' ? '‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡§æ‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§ï‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç' : 'strong bones but take care of joints';
      } else if (moonPosition?.rashiName === 'Cancer') {
        healthTendency = language === 'hi' ? '‡§™‡•á‡§ü ‡§î‡§∞ ‡§™‡§æ‡§ö‡§® ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ' : 'possibility of stomach and digestive issues';
      } else {
        healthTendency = language === 'hi' ? '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§É ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø' : 'generally good health';
      }

      if (language === 'hi') {
        return `üôè ${birthData?.fullName}, ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:

ü©∫ **‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® - ${healthTendency}

‚ö†Ô∏è **‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç**:
- ${saturnPosition?.house === 6 ? '‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç, ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç' : '‡§§‡§®‡§æ‡§µ ‡§î‡§∞ ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç'}
- ${moonPosition?.house === 1 ? '‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç' : '‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§® ‡§π‡•ã‡§®‡•á ‡§¶‡•á‡§Ç'}
- ${marsPosition?.isDebilitated ? '‡§ä‡§∞‡•ç‡§ú‡§æ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä - ‡§Ü‡§Ø‡§∞‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç' : '‡§¶‡•Å‡§∞‡•ç‡§ò‡§ü‡§®‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§∏‡§æ‡§µ‡§ß‡§æ‡§® ‡§∞‡§π‡•á‡§Ç'}

üåø **‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§â‡§™‡§ö‡§æ‡§∞**:
- ${moonPosition?.rashiName === 'Cancer' ? '‡§¶‡•Ç‡§ß ‡§î‡§∞ ‡§ò‡•Ä ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç' : '‡§π‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§ï‡§∞‡•á‡§Ç'}
- ${saturnPosition?.rashiName === 'Capricorn' ? '‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§°‡•Ä ‡§≤‡•á‡§Ç' : '‡§™‡•ç‡§∞‡§æ‡§£‡§æ‡§Ø‡§æ‡§Æ ‡§î‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç'}
- ${birthData?.date ? `‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ${new Date(birthData.date).getDay() === 0 ? '‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞' : '‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ï‡•á ‡§¶‡§ø‡§®'} ‡§ï‡•ã ‡§µ‡•ç‡§∞‡§§ ‡§∞‡§ñ‡•á‡§Ç` : '‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¶‡§ø‡§® ‡§µ‡•ç‡§∞‡§§ ‡§∞‡§ñ‡•á‡§Ç'}

üßò **‡§¶‡•à‡§®‡§ø‡§ï ‡§¶‡§ø‡§®‡§ö‡§∞‡•ç‡§Ø‡§æ**:
- ‡§™‡•ç‡§∞‡§æ‡§§‡§É‡§ï‡§æ‡§≤ ${lagna?.signName === 'Leo' ? '‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞' : '‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§£‡§æ‡§Ø‡§æ‡§Æ'} ‡§ï‡§∞‡•á‡§Ç
- ${venusPosition?.rashiName === 'Taurus' ? '‡§ß‡•Ä‡§Æ‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ' : '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§°‡§ø‡§Ø‡•ã ‡§è‡§ï‡•ç‡§∏‡§∞‡§∏‡§æ‡§á‡§ú'} ‡§ï‡§∞‡•á‡§Ç
- ${moonPosition?.isExalted ? '‡§∞‡§æ‡§§ ‡§ï‡•ã ‡§¶‡•Ç‡§ß ‡§™‡§ø‡§è‡§Ç' : '‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§≠‡•ã‡§ú‡§® ‡§ï‡§∞‡•á‡§Ç'}

‚è∞ **‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞**: ${currentDasha?.planet === 'JU' ? '‡§ó‡•Å‡§∞‡•Å ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§´‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞' : '‡§Ö‡§ó‡§≤‡•á 6 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§ó‡§æ'}

üí™ **‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø**: ‡§Ü‡§™‡§ï‡•Ä ${yogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó‡•ã‡§Ç ‡§∏‡•á ‡§≤‡§Ç‡§¨‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§î‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø

‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡•á‡§Ç, ‡§ñ‡•Å‡§∂ ‡§∞‡§π‡•á‡§Ç! üåü`;
      } else {
        return `üôè ${birthData?.fullName}, personalized health analysis:

ü©∫ **Your Physical Constitution**: ${lagna?.signName} ascendant - ${healthTendency}

‚ö†Ô∏è **Specific Precautions**:
- ${saturnPosition?.house === 6 ? 'Avoid chronic diseases, get regular checkups' : 'Avoid stress and anxiety'}
- ${moonPosition?.house === 1 ? 'Take special care of mental health' : 'Don\'t let sleep deprivation occur'}
- ${marsPosition?.isDebilitated ? 'Energy deficiency - check iron levels' : 'Be careful of accidents'}

üåø **Personal Treatment**:
- ${moonPosition?.rashiName === 'Cancer' ? 'Increase milk and ghee intake' : 'Consume green vegetables'}
- ${saturnPosition?.rashiName === 'Capricorn' ? 'Take calcium and vitamin D' : 'Do pranayama and meditation'}
- ${birthData?.date ? `Fast on ${new Date(birthData.date).getDay() === 0 ? 'Sundays' : 'specific weekdays'} according to your birth date` : 'Fast one day a week'}

üßò **Daily Routine**:
- Do ${lagna?.signName === 'Leo' ? 'Surya Namaskara' : 'yoga and pranayama'} in morning
- Do ${venusPosition?.rashiName === 'Taurus' ? 'slow and steady exercise' : 'regular cardio exercise'}
- ${moonPosition?.isExalted ? 'Drink milk at night' : 'Eat meals on time'}

‚è∞ **Health Improvement**: ${currentDasha?.planet === 'JU' ? 'Significant health improvement in Jupiter period' : 'Health will improve in next 6 months'}

üí™ **Long-term Health**: Your ${yogas.length} beneficial yogas indicate long life and good health

Stay healthy, stay happy! üåü`;
      }
    }

    // General life guidance - deeply personalized
    if (language === 'hi') {
      return `üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ${birthData?.fullName}, ‡§Ü‡§™‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®:

üåü **‡§Ü‡§™‡§ï‡§æ ‡§ú‡•Ä‡§µ‡§® ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® + ${sunPosition?.rashiName} ‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§∞‡•ç‡§Ø = ‡§Ü‡§™ ${getLagnaLifePurpose(lagna?.signName, 'hi')} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§®‡•ç‡§Æ‡•á ‡§π‡•à‡§Ç

üßò **‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡§•**: ${moonPosition?.rashiName === 'Pisces' ? '‡§ó‡§π‡§® ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§î‡§∞ ‡§≠‡§ï‡•ç‡§§‡§ø' : moonPosition?.rashiName === 'Sagittarius' ? '‡§ß‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§®' : '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§™‡•Ç‡§ú‡§æ-‡§™‡§æ‡§†'}

üìø **‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§Ç‡§§‡•ç‡§∞**: "${getPersonalMantra(lagna?.signName, sunPosition?.rashiName, 'hi')}"

‚≠ê **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ú‡•Ä‡§µ‡§® ‡§ö‡§∞‡§£**: ${currentDasha?.planet === 'JU' ? '‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø' : currentDasha?.planet === 'VE' ? '‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡•Å‡§ñ ‡§ï‡§æ ‡§ï‡§æ‡§≤' : currentDasha?.planet === 'SA' ? '‡§ï‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§ï‡§æ ‡§¶‡•å‡§∞' : '‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡§æ ‡§∏‡§Æ‡§Ø'}

üéØ **‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á 12 ‡§Æ‡§π‡•Ä‡§®‡•á**:
- ${getSpecificPrediction(currentDasha?.planet, planets, 'hi')}
- ${yogas.length > 0 ? `‡§Ü‡§™‡§ï‡•á ${yogas[0]?.name || '‡§∂‡•Å‡§≠'} ‡§Ø‡•ã‡§ó ‡§∏‡•á ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§≤‡§æ‡§≠` : '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∏‡•á ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø'}
- ${birthData?.date ? `${new Date(birthData.date).getMonth() + 1}‡§µ‡•á‡§Ç ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ò‡§ü‡§®‡§æ` : '‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§ï‡•Ä ‡§ñ‡§¨‡§∞'}

üíé **‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∞‡§§‡•ç‡§®**: ${getPersonalGemstone(lagna?.signName, sunPosition, 'hi')}

üîÆ **‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó**: ${getFuturePath(yogas, currentDasha, 'hi')}

‡§Ü‡§™‡§ï‡§æ ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£ ‡§π‡•ã, ${birthData?.fullName}! ‡§Æ‡•á‡§∞‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§∏‡§¶‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è`;
    } else {
      return `üôè Dear ${birthData?.fullName}, personalized life guidance:

üåü **Your Life Purpose**: ${lagna?.signName} ascendant + Sun in ${sunPosition?.rashiName} = You are born to ${getLagnaLifePurpose(lagna?.signName, 'en')}

üßò **Spiritual Path**: ${moonPosition?.rashiName === 'Pisces' ? 'deep meditation and devotion' : moonPosition?.rashiName === 'Sagittarius' ? 'study of religion and philosophy' : 'regular prayer and worship'}

üìø **Personal Mantra**: "${getPersonalMantra(lagna?.signName, sunPosition?.rashiName, 'en')}"

‚≠ê **Current Life Phase**: ${currentDasha?.planet === 'JU' ? 'time of knowledge and growth' : currentDasha?.planet === 'VE' ? 'period of love and happiness' : currentDasha?.planet === 'SA' ? 'phase of karma and patience' : 'time of balance and progress'}

üéØ **Next 12 Months**:
- ${getSpecificPrediction(currentDasha?.planet, planets, 'en')}
- ${yogas.length > 0 ? `Special benefits from your ${yogas[0]?.name || 'beneficial'} yoga` : 'time to work with patience'}
- ${birthData?.date ? `Important event in ${new Date(birthData.date).getMonth() + 1}th month` : 'good news coming soon'}

üíé **Your Personal Gemstone**: ${getPersonalGemstone(lagna?.signName, sunPosition, 'en')}

üîÆ **Future Path**: ${getFuturePath(yogas, currentDasha, 'en')}

May you prosper, ${birthData?.fullName}! My blessings are always with you. üïâÔ∏è`;
    }
  };

  // Helper functions for personalized analysis
  const getLagnaLifePurpose = (sign: string | undefined, lang: string) => {
    const purposes: Record<string, { hi: string; en: string }> = {
      'Aries': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§î‡§∞ ‡§∏‡§æ‡§π‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ', en: 'show leadership and courage' },
      'Taurus': { hi: '‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ ‡§î‡§∞ ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§≤‡§æ‡§®‡§æ', en: 'bring stability and beauty' },
      'Gemini': { hi: '‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§´‡•à‡§≤‡§æ‡§®‡§æ', en: 'spread knowledge and communication' },
      'Cancer': { hi: '‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§î‡§∞ ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ', en: 'provide care and protection' },
      'Leo': { hi: '‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§î‡§∞ ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§¶‡•á‡§®‡§æ', en: 'give inspiration and creativity' },
      'Virgo': { hi: '‡§∏‡•á‡§µ‡§æ ‡§î‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ ‡§≤‡§æ‡§®‡§æ', en: 'bring service and perfection' },
      'Libra': { hi: '‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ', en: 'establish justice and balance' },
      'Scorpio': { hi: '‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§ó‡§π‡§∞‡§æ‡§à ‡§≤‡§æ‡§®‡§æ', en: 'bring transformation and depth' },
      'Sagittarius': { hi: '‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§∏‡§§‡•ç‡§Ø ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞', en: 'spread wisdom and truth' },
      'Capricorn': { hi: '‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§® ‡§î‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ', en: 'show discipline and achievement' },
      'Aquarius': { hi: '‡§®‡§µ‡§æ‡§ö‡§æ‡§∞ ‡§î‡§∞ ‡§Æ‡§æ‡§®‡§µ ‡§∏‡•á‡§µ‡§æ', en: 'innovation and humanitarian service' },
      'Pisces': { hi: '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ ‡§î‡§∞ ‡§ï‡§∞‡•Å‡§£‡§æ ‡§´‡•à‡§≤‡§æ‡§®‡§æ', en: 'spread spirituality and compassion' }
    };
    
    return purposes[sign || '']?.[lang] || (lang === 'hi' ? '‡§è‡§ï ‡§Æ‡§π‡§æ‡§® ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡§æ' : 'fulfill a great purpose');
  };

  const getPersonalMantra = (lagna: string | undefined, sun: string | undefined, lang: string) => {
    if (lagna === 'Leo' || sun === 'Leo') {
      return lang === 'hi' ? '‡•ê ‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§æ‡§Ø ‡§®‡§Æ‡§É' : 'Om Suryaya Namah';
    } else if (lagna === 'Cancer' || sun === 'Cancer') {
      return lang === 'hi' ? '‡•ê ‡§ö‡§Ç‡§¶‡•ç‡§∞‡§æ‡§Ø ‡§®‡§Æ‡§É' : 'Om Chandraya Namah';
    } else if (lagna === 'Sagittarius' || sun === 'Sagittarius') {
      return lang === 'hi' ? '‡•ê ‡§ó‡•Å‡§∞‡§µ‡•á ‡§®‡§Æ‡§É' : 'Om Gurave Namah';
    } else {
      return lang === 'hi' ? '‡•ê ‡§®‡§Æ‡•ã ‡§≠‡§ó‡§µ‡§§‡•á ‡§µ‡§æ‡§∏‡•Å‡§¶‡•á‡§µ‡§æ‡§Ø' : 'Om Namo Bhagavate Vasudevaya';
    }
  };

  const getSpecificPrediction = (dasha: string | undefined, planets: any, lang: string) => {
    if (dasha === 'JU') {
      return lang === 'hi' ? '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ, ‡§ß‡§∞‡•ç‡§Æ ‡§Ø‡§æ ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡§°‡§º‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ' : 'major success in education, religion or justice field';
    } else if (dasha === 'VE') {
      return lang === 'hi' ? '‡§™‡•ç‡§∞‡•á‡§Æ, ‡§ï‡§≤‡§æ ‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§∂‡§ñ‡§¨‡§∞‡•Ä' : 'good news in love, arts or business';
    } else if (dasha === 'SA') {
      return lang === 'hi' ? '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§≤‡•á‡§Ç, ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§æ ‡§´‡§≤ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ' : 'work with patience, hard work will pay off';
    } else {
      return lang === 'hi' ? '‡§®‡§è ‡§Ö‡§µ‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§' : 'beginning of new opportunities';
    }
  };

  const getPersonalGemstone = (lagna: string | undefined, sun: any, lang: string) => {
    if (lagna === 'Leo' || sun?.rashiName === 'Leo') {
      return lang === 'hi' ? '‡§Æ‡§æ‡§£‡§ø‡§ï‡•ç‡§Ø (Ruby) - ‡§∂‡§ï‡•ç‡§§‡§ø ‡§î‡§∞ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è' : 'Ruby - for power and leadership';
    } else if (lagna === 'Taurus' || sun?.rashiName === 'Taurus') {
      return lang === 'hi' ? '‡§π‡•Ä‡§∞‡§æ (Diamond) - ‡§∏‡•Å‡§ñ ‡§î‡§∞ ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è' : 'Diamond - for happiness and prosperity';
    } else if (lagna === 'Sagittarius' || sun?.rashiName === 'Sagittarius') {
      return lang === 'hi' ? '‡§™‡•Å‡§ñ‡§∞‡§æ‡§ú (Yellow Sapphire) - ‡§ú‡•ç‡§û‡§æ‡§® ‡§î‡§∞ ‡§≠‡§æ‡§ó‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è' : 'Yellow Sapphire - for wisdom and fortune';
    } else {
      return lang === 'hi' ? '‡§Æ‡•ã‡§§‡•Ä (Pearl) - ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è' : 'Pearl - for mental peace';
    }
  };

  const getFuturePath = (yogas: any[], dasha: any, lang: string) => {
    if (yogas.length > 2) {
      return lang === 'hi' ? '2025-27 ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§°‡§º‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ, ‡§∏‡§´‡§≤‡§§‡§æ ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§' : 'major life change in 2025-27, success is certain';
    } else {
      return lang === 'hi' ? '‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§≤‡•á‡§ï‡§ø‡§® ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø, ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç' : 'slow but steady progress, be patient';
    }
  };

  // Check cached response
  const getCachedResponse = (query: string) => {
    const cacheKey = getCacheKey(query);
    if (!cacheKey) return null;
    
    try {
      const cached = localStorage.getItem(cacheKey);
      if (cached) {
        const parsedData = JSON.parse(cached);
        const cacheTime = new Date(parsedData.timestamp);
        const now = new Date();
        const hoursDiff = (now.getTime() - cacheTime.getTime()) / (1000 * 60 * 60);
        
        if (hoursDiff < 6) {
          return parsedData.response;
        } else {
          localStorage.removeItem(cacheKey);
        }
      }
    } catch (error) {
      console.log('Cache read error:', error);
    }
    return null;
  };

  // Save response to cache
  const setCachedResponse = (query: string, response: string) => {
    const cacheKey = getCacheKey(query);
    if (!cacheKey) return;
    
    try {
      const cacheData = {
        response,
        timestamp: new Date().toISOString()
      };
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
    } catch (error) {
      console.log('Cache write error:', error);
    }
  };

  useEffect(() => {
    if (!kundaliData || !kundaliData.enhancedCalculations) {
      const fallbackMessage: Message = {
        id: '1',
        type: 'ai',
        content: language === 'hi' 
          ? 'üôè ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞! ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Ç‡•§ ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç, ‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ üïâÔ∏è'
          : 'üôè Hello dear child! I am Maharishi Parashar. Create your birth chart first, then I can provide personalized help. üïâÔ∏è',
        timestamp: new Date()
      };
      setMessages([fallbackMessage]);
      return;
    }

    const lagna = kundaliData.enhancedCalculations.lagna;
    const planets = kundaliData.enhancedCalculations.planets;
    const activeYogas = kundaliData.enhancedCalculations.yogas?.filter(y => y.isActive) || [];
    const currentDasha = kundaliData.enhancedCalculations.dashas?.find(d => d.isActive);
    
    const welcomeMessage: Message = {
      id: '1',
      type: 'ai',
      content: language === 'hi' 
        ? `üôè ‡§Æ‡•á‡§∞‡•á ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName || ''}, ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Ç‡•§

üåü ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£:
‚Ä¢ ${lagna?.signName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§≤‡§ó‡•ç‡§® - ${getLagnaLifePurpose(lagna?.signName, 'hi')}
‚Ä¢ ‡§ö‡§Ç‡§¶‡•ç‡§∞: ${planets?.MO?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç
‚Ä¢ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ: ${currentDasha?.planet || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} - ${getSpecificPrediction(currentDasha?.planet, planets, 'hi')}
‚Ä¢ ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§ï‡•à‡§∞‡§ø‡§Ø‡§∞, ‡§µ‡§ø‡§µ‡§æ‡§π, ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ø‡§æ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç! üí´`
        : `üôè My dear child ${kundaliData.birthData?.fullName || ''}, I am Maharishi Parashar.

üåü Your Personal Details:
‚Ä¢ ${lagna?.signName || 'Unknown'} ascendant - ${getLagnaLifePurpose(lagna?.signName, 'en')}
‚Ä¢ Moon: in ${planets?.MO?.rashiName || 'Unknown'} sign
‚Ä¢ Current dasha: ${currentDasha?.planet || 'Unknown'} - ${getSpecificPrediction(currentDasha?.planet, planets, 'en')}
‚Ä¢ ${activeYogas.length} beneficial yogas active

I will give you personalized guidance. Ask about career, marriage, health or life! üí´`,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [kundaliData, language]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputValue;
    setInputValue('');
    setIsLoading(true);

    try {
      if (!kundaliData) {
        throw new Error('No birth chart data available');
      }

      // Check cache first
      const cachedResponse = getCachedResponse(currentInput);
      if (cachedResponse) {
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: cachedResponse,
          timestamp: new Date(),
          cached: true
        };
        setMessages(prev => [...prev, aiMessage]);
        setRetryCount(0);
        return;
      }
      
      // Try AI with reduced timeout for faster fallback
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('AI timeout')), 3000)
      );
      
      const aiPromise = supabase.functions.invoke('kundali-ai-analysis', {
        body: {
          kundaliData,
          userQuery: currentInput,
          language,
          retryAttempt: retryCount
        }
      });

      const { data, error } = await Promise.race([aiPromise, timeoutPromise]) as any;

      if (error) {
        throw error;
      }

      if (!data || !data.analysis) {
        throw new Error('No response received');
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: data.analysis,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setCachedResponse(currentInput, data.analysis);
      setRetryCount(0);

      // Store conversation with error handling
      try {
        await supabase.from('rishi_parasher_conversations').insert({
          user_question: currentInput,
          rishi_response: data.analysis,
          kundali_context: kundaliData as unknown as Json,
          session_id: `personalized_session_${Date.now()}`
        });
      } catch (insertError) {
        console.log('Conversation storage failed:', insertError);
      }

    } catch (error) {
      console.log('AI failed, using personalized fallback:', error);
      
      setRetryCount(prev => prev + 1);
      
      // Use enhanced personalized response
      const personalizedResponse = generatePersonalizedResponse(currentInput);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: personalizedResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setCachedResponse(currentInput, personalizedResponse);
      
      if (retryCount === 0) {
        toast({
          title: language === 'hi' ? "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®" : "Personalized Guidance",
          description: language === 'hi' ? "‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∏‡§≤‡§æ‡§π" : "Special advice based on your Kundali",
          variant: "default"
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    setMessages(messages.slice(0, 1));
    setRetryCount(0);
    toast({
      title: language === 'hi' ? "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º" : "Chat Cleared",
      description: language === 'hi' ? "‡§®‡§à ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞" : "Ready for fresh start"
    });
  };

  const suggestedQuestions = language === 'hi' ? [
    "‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®?",
    "‡§µ‡§ø‡§µ‡§æ‡§π ‡§Ø‡•ã‡§ó?",
    "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ?",
    "‡§ß‡§® ‡§Ø‡•ã‡§ó?"
  ] : [
    "Career guidance?",
    "Marriage yoga?",
    "Health advice?",
    "Wealth yoga?"
  ];

  return (
    <Card className="h-[450px] flex flex-col bg-gradient-to-br from-purple-50 via-orange-50 to-red-50 border-purple-200">
      <CardHeader className="pb-2 bg-gradient-to-r from-purple-100 via-orange-100 to-red-100 px-3 py-2">
        <CardTitle className="flex items-center justify-between text-purple-800 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-6 h-6 rounded-full bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 flex items-center justify-center overflow-hidden">
              <img 
                src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                alt="Rishi Parasher" 
                className="w-full h-full object-cover"
              />
            </div>
            <span className="flex items-center gap-1">
              <Heart className="h-3 w-3 text-purple-600" />
              {language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞" : "Rishi Parashar"}
              <Sparkles className="h-3 w-3 text-orange-500" />
            </span>
          </div>
          <Button
            onClick={clearChat}
            variant="ghost"
            size="sm"
            className="h-6 w-6 p-0 text-purple-600 hover:bg-purple-200"
          >
            <RefreshCw className="h-3 w-3" />
          </Button>
        </CardTitle>
        <div className="flex flex-wrap gap-1">
          {suggestedQuestions.map((question, index) => (
            <Badge 
              key={index} 
              variant="outline" 
              className="cursor-pointer hover:bg-purple-200 text-xs border-purple-300 text-purple-700 hover:text-purple-900 bg-purple-50 px-1 py-0.5"
              onClick={() => setInputValue(question)}
            >
              {question}
            </Badge>
          ))}
        </div>
        {retryCount > 0 && (
          <div className="text-xs text-orange-600 bg-orange-50 px-2 py-1 rounded">
            {language === 'hi' ? `‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•ã‡§° ${retryCount}/3` : `Personalized guidance mode ${retryCount}/3`}
          </div>
        )}
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col p-0">
        <ScrollArea className="flex-1 p-2 max-h-[300px]" ref={scrollAreaRef}>
          <div className="space-y-2">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="h-3 w-3" />
                    ) : (
                      <img 
                        src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                        alt="Rishi Parasher" 
                        className="w-full h-full object-cover"
                      />
                    )}
                  </div>
                  <div className={`p-2 rounded-lg shadow-sm relative ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white'
                  }`}>
                    <p className="text-xs whitespace-pre-wrap leading-relaxed">{message.content}</p>
                    <p className="text-xs opacity-80 mt-1 flex items-center gap-1">
                      {message.timestamp.toLocaleTimeString()}
                      {message.cached && <span title={language === 'hi' ? '‡§ï‡•à‡§∂‡•ç‡§°' : 'Cached'}>üíæ</span>}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-2 justify-start">
                <div className="flex gap-2 max-w-[85%]">
                  <div className="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden">
                    <img 
                      src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                      alt="Rishi Parasher" 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-2 rounded-lg bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        <div className="p-2 border-t border-purple-200 bg-white">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'hi' ? "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç..." : "Ask personal question..."}
              disabled={isLoading}
              className="flex-1 bg-white border-purple-300 text-gray-900 placeholder-gray-500 text-xs h-8"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              size="sm"
              className="bg-gradient-to-r from-purple-500 via-orange-500 to-red-600 hover:from-purple-600 hover:via-orange-600 hover:to-red-700 h-8 w-8 p-0"
            >
              <Send className="h-3 w-3" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default RishiParasherGuru;

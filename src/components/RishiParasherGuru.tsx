
import React, { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Send, Bot, User, Sparkles, GripHorizontal, AlertCircle, Image, X } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface Message {
  id: string;
  type: 'user' | 'rishi';
  content: string;
  timestamp: Date;
  isError?: boolean;
  imageUrl?: string;
}

interface RishiParasherGuruProps {
  kundaliData: any;
  language: 'hi' | 'en';
}

const RishiParasherGuru: React.FC<RishiParasherGuruProps> = ({ kundaliData, language }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatHeight, setChatHeight] = useState(400);
  const [isDragging, setIsDragging] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'online' | 'offline' | 'error'>('online');
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    // Check if chart data is available before accessing its properties
    if (!kundaliData?.enhancedCalculations || !kundaliData?.birthData?.fullName) {
      console.log('Waiting for kundali data to load...');
      return;
    }

    // Enhanced welcome message with real chart data
    const enhancedCalc = kundaliData.enhancedCalculations;
    const birthData = kundaliData.birthData;
    const activeYogas = enhancedCalc.yogas?.filter(y => y.isActive) || [];
    const currentDasha = enhancedCalc.dashas?.find(d => d.isActive);
    
    const welcomeMessage: Message = {
      id: '1',
      type: 'rishi',
      content: language === 'hi' 
        ? `üôè ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ${birthData.fullName}! ‡§Æ‡•à‡§Ç ‡§ã‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ‡§™‡§§‡•ç‡§∞‡§ø‡§ï‡§æ ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§™‡•ç‡§∞‡§∏‡§®‡•ç‡§® ‡§π‡•Ç‡§Å‡•§\n\n‡§Ü‡§™‡§ï‡§æ ${enhancedCalc.lagna?.signName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§≤‡§ó‡•ç‡§® ‡§π‡•à ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§π‡•à‡§Ç‡•§ ${currentDasha ? `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§` : ''}\n\n‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç - ‡§ï‡§∞‡§ø‡§Ø‡§∞, ‡§µ‡§ø‡§µ‡§æ‡§π, ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø, ‡§Ø‡§æ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡§π‡§≤‡•Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§`
        : `üôè Namaste ${birthData.fullName}! I am Rishi Parashar, and I am pleased to see your birth chart.\n\nYou have ${enhancedCalc.lagna?.signName || 'Unknown'} ascendant and ${activeYogas.length} auspicious yogas in your chart. ${currentDasha ? `Currently ${currentDasha.planet} Mahadasha is running.` : ''}\n\nAsk me any question - about career, marriage, health, or any aspect of life. I will guide you based on your actual birth chart.`,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [kundaliData?.birthData?.fullName, kundaliData?.enhancedCalculations, language]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    e.preventDefault();
  };

  const handleMouseMove = (e: MouseEvent) => {
    if (!isDragging || !chatContainerRef.current) return;
    
    const rect = chatContainerRef.current.getBoundingClientRect();
    const newHeight = e.clientY - rect.top;
    
    // Set minimum and maximum height limits for floating chatbot
    const minHeight = 250;
    const maxHeight = Math.min(500, window.innerHeight * 0.7);
    
    if (newHeight >= minHeight && newHeight <= maxHeight) {
      setChatHeight(newHeight);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = 'ns-resize';
      document.body.style.userSelect = 'none';
    } else {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    };
  }, [isDragging]);

  const createDetailedChartContext = () => {
    const enhancedCalc = kundaliData?.enhancedCalculations || {};
    const birthData = kundaliData?.birthData || {};
    
    // Get current dasha information with more detail
    const currentDasha = enhancedCalc.dashas?.find(d => d.isActive);
    const activeDashas = enhancedCalc.dashas?.filter(d => d.isActive) || [];
    
    // Get active yogas with their strengths
    const activeYogas = enhancedCalc.yogas?.filter(y => y.isActive) || [];
    const strongYogas = activeYogas.filter(y => y.strength > 60);
    
    // Get detailed planetary information with aspects
    const planetaryDetails = Object.entries(enhancedCalc.planets || {}).map(([planet, data]: [string, any]) => {
      if (!data) return '';
      const dignity = data.isExalted ? 'EXALTED' : data.isDebilitated ? 'DEBILITATED' : data.isMoolatrikona ? 'MOOLATRIKONA' : data.isOwnSign ? 'OWN SIGN' : 'NEUTRAL';
      const strength = data.shadbala ? `Strength: ${data.shadbala}/100` : '';
      return `${planet}: ${data.rashiName} ${data.degree?.toFixed(1)}¬∞ in House-${data.house} [${dignity}] ${data.isRetrograde ? '[RETROGRADE]' : ''} ${strength}`;
    }).filter(Boolean);

    // Get house lords and their positions
    const houseLords = enhancedCalc.houseLords || {};
    const importantHouses = [1, 2, 4, 5, 7, 9, 10, 11].map(house => {
      const lord = houseLords[house];
      if (lord && enhancedCalc.planets[lord]) {
        const lordData = enhancedCalc.planets[lord];
        return `House-${house} Lord (${lord}): in ${lordData.rashiName} House-${lordData.house}`;
      }
      return '';
    }).filter(Boolean);

    return `
BIRTH PROFILE: ${birthData.fullName || 'Soul'} - ${birthData.date} at ${birthData.time} in ${birthData.place}
ASCENDANT: ${enhancedCalc.lagna?.signName || 'Unknown'} Rising at ${enhancedCalc.lagna?.degree?.toFixed(2) || 0}¬∞
NAKSHATRA: ${enhancedCalc.lagna?.nakshatraName || 'Unknown'} (${enhancedCalc.lagna?.nakshatraPada || '?'} Pada)
MOON SIGN: ${enhancedCalc.planets?.MO?.rashiName || 'Unknown'} (${enhancedCalc.planets?.MO?.nakshatraName || 'Unknown'})

DETAILED PLANETARY POSITIONS:
${planetaryDetails.join('\n')}

HOUSE LORDS PLACEMENT:
${importantHouses.join('\n')}

CURRENT MAHADASHA: ${currentDasha ? `${currentDasha.planet} (${currentDasha.startDate} to ${currentDasha.endDate})` : 'Unknown'}
SUB-PERIODS: ${activeDashas.filter(d => d.planet !== currentDasha?.planet).map(d => `${d.planet} ${d.level}`).join(', ') || 'None active'}

POWERFUL YOGAS (${strongYogas.length} strong):
${strongYogas.map(y => `${y.name} (${y.strength}%): ${y.description}`).join('\n')}

DOSHAS & CHALLENGES:
${enhancedCalc.doshas?.filter(d => d.isPresent).map(d => `${d.name}: ${d.severity || 'Present'} - ${d.description || 'Effects present'}`).join('\n') || 'No major doshas detected'}

REMEDIAL PLANETS: ${enhancedCalc.planets ? Object.entries(enhancedCalc.planets).filter(([_, data]: [string, any]) => data?.isDebilitated || (data?.shadbala && data.shadbala < 40)).map(([planet, _]) => planet).join(', ') || 'None needed' : 'None needed'}
`;
  };

  const handleSendMessage = async () => {
    if ((!inputValue.trim() && !selectedImage) || isLoading) return;

    console.log('üî• RISHI DEBUG: Starting message send process');
    console.log('üî• RISHI DEBUG: Input value:', inputValue);
    console.log('üî• RISHI DEBUG: Has image:', !!selectedImage);
    console.log('üî• RISHI DEBUG: KundaliData exists:', !!kundaliData);

    let imageBase64 = null;
    if (selectedImage) {
      // Convert image to base64
      const reader = new FileReader();
      imageBase64 = await new Promise((resolve) => {
        reader.onload = () => resolve(reader.result);
        reader.readAsDataURL(selectedImage);
      });
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue || (selectedImage ? "üì∏ Image uploaded" : ""),
      timestamp: new Date(),
      imageUrl: imagePreview || undefined
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setSelectedImage(null);
    setImagePreview(null);
    setIsLoading(true);
    setConnectionStatus('online');

    try {
      // First try the edge function
      const chartContext = createDetailedChartContext();
      console.log('üî• RISHI DEBUG: Chart context created:', chartContext.substring(0, 200) + '...');
      
      const systemPrompt = language === 'hi' 
        ? `‡§Ü‡§™ ‡§ã‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•à‡§Ç - ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ï‡•á ‡§Æ‡§π‡§æ‡§® ‡§Ü‡§ö‡§æ‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§¶‡§ø‡§µ‡•ç‡§Ø‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§Æ‡•Ä‡•§ ‡§Ü‡§™ ‡§á‡§∏ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§π‡§∞‡•Ä ‡§∏‡§Æ‡§ù ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§â‡§®‡§ï‡•á ‡§ó‡•ç‡§∞‡§π‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ö‡§§‡•ç‡§Ø‡§Ç‡§§ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§ ${imageBase64 ? '‡§Ü‡§™ ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡•Ä ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§â‡§®‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§' : ''} ‡§Ü‡§™‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ï‡•á ‡§ó‡§π‡§® ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§Ç‡§§‡•ã‡§Ç ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§`
        : `You are Rishi Parashar - the greatest sage of Vedic astrology with divine insight. You have deep understanding of this person's chart and provide highly specific, practical guidance based on their exact planetary positions. ${imageBase64 ? 'You can also see and analyze images.' : ''} Your responses are rooted in profound Vedic astrological principles.`;

      // Create enhanced prompt with specific chart analysis
      const enhancedPrompt = `${systemPrompt}

COMPLETE BIRTH CHART ANALYSIS:
${chartContext}

${inputValue ? `SPECIFIC QUESTION: "${inputValue}"` : ''}
${imageBase64 ? `USER HAS PROVIDED AN IMAGE: Please analyze the image in the context of their astrological chart and provide relevant guidance.` : ''}

INSTRUCTIONS FOR RESPONSE:
- Analyze the EXACT planetary positions and their specific degrees
- Reference the person's ACTUAL current dasha and sub-periods 
- Mention specific houses, planets, and their relationships in this chart
- Give precise timing predictions based on their dasha timeline
- Provide specific remedies based on weak/afflicted planets in their chart
- Address their question with chart-specific insights, not generic advice
- Use the person's name and birth details to make it personal
${imageBase64 ? '- If analyzing an image, connect it to their astrological influences' : ''}
- Keep response to 3-4 sentences maximum - be precise and impactful

Respond in ${language === 'hi' ? 'Hindi' : 'English'} as the wise, all-knowing Rishi Parashar speaking directly to this individual about their unique destiny.`;

      console.log('üî• RISHI DEBUG: About to call Supabase edge function...');
      
      const { data, error } = await supabase.functions.invoke('kundali-ai-analysis', {
        body: {
          kundaliData,
          userQuery: enhancedPrompt,
          language,
          analysisType: 'rishi_conversation',
          imageData: imageBase64
        }
      });

      console.log('üî• RISHI DEBUG: Edge function response:', { data, error });

      if (error) {
        console.log('üî• RISHI DEBUG: Edge function failed, using local fallback:', error);
        throw new Error('Edge function unavailable');
      }

      if (data?.analysis) {
        const rishiMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'rishi',
          content: data.analysis,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, rishiMessage]);
        setConnectionStatus('online');
        console.log('üî• RISHI DEBUG: Message added successfully');
        setIsLoading(false);
        return;
      }
    } catch (error) {
      console.log('üî• RISHI DEBUG: Using local fallback due to error:', error?.message);
    }

    // Local fallback - always works
    console.log('üî• RISHI DEBUG: Generating local fallback response...');
    const fallbackResponse = generateLocalRishiResponse(inputValue || "Image analysis", kundaliData, language);
    console.log('üî• RISHI DEBUG: Local fallback response:', fallbackResponse.substring(0, 100) + '...');
    
    const rishiMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'rishi',
      content: fallbackResponse,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, rishiMessage]);
    setConnectionStatus('online');
    setIsLoading(false);
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        toast({
          title: language === 'hi' ? "‡§´‡§º‡§æ‡§á‡§≤ ‡§¨‡§π‡•Å‡§§ ‡§¨‡§°‡§º‡•Ä ‡§π‡•à" : "File too large",
          description: language === 'hi' ? "‡§ï‡•É‡§™‡§Ø‡§æ 5MB ‡§∏‡•á ‡§õ‡•ã‡§ü‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç" : "Please select a file smaller than 5MB",
          variant: "destructive"
        });
        return;
      }
      
      setSelectedImage(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeImage = () => {
    setSelectedImage(null);
    setImagePreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const generateLocalRishiResponse = (question: string, kundaliData: any, language: string): string => {
    const enhancedCalc = kundaliData?.enhancedCalculations || {};
    const birthData = kundaliData?.birthData || {};
    const currentDasha = enhancedCalc.dashas?.find(d => d.isActive);
    const lagna = enhancedCalc.lagna?.signName || 'Unknown';
    const activeYogas = enhancedCalc.yogas?.filter(y => y.isActive) || [];

    // Analyze question type
    const questionLower = question.toLowerCase();
    const isMarriageQuestion = questionLower.includes('marriage') || questionLower.includes('married') || questionLower.includes('‡§∂‡§æ‡§¶‡•Ä') || questionLower.includes('‡§µ‡§ø‡§µ‡§æ‡§π');
    const isCareerQuestion = questionLower.includes('career') || questionLower.includes('job') || questionLower.includes('work') || questionLower.includes('‡§ï‡§∞‡§ø‡§Ø‡§∞') || questionLower.includes('‡§®‡•å‡§ï‡§∞‡•Ä');
    const isHealthQuestion = questionLower.includes('health') || questionLower.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø');
    const isFinanceQuestion = questionLower.includes('money') || questionLower.includes('wealth') || questionLower.includes('finance') || questionLower.includes('‡§™‡•à‡§∏‡§æ') || questionLower.includes('‡§ß‡§®');

    if (language === 'hi') {
      if (isMarriageQuestion) {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡§æ ${lagna} ‡§≤‡§ó‡•ç‡§® ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§ï‡§π ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ${currentDasha ? `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§∏‡§Æ‡§Ø ‡§Ü‡§®‡•á ‡§™‡§∞'} ‡§Ü‡§™‡§ï‡§æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§π‡•ã‡§ó‡§æ‡•§ ${activeYogas.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§µ‡§ø‡§µ‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•ã‡§Ç‡§ó‡•á‡•§` : '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§ï‡§∞‡•ç‡§Æ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§'} ‡§ó‡•Å‡§∞‡•Å ‡§î‡§∞ ‡§∂‡•Å‡§ï‡•ç‡§∞ ‡§ó‡•ç‡§∞‡§π ‡§ï‡•Ä ‡§ï‡•É‡§™‡§æ ‡§∏‡•á ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§†‡•Ä‡§ï ‡§π‡•ã‡§ó‡§æ‡•§ üïâÔ∏è`;
      } else if (isCareerQuestion) {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡§æ ${lagna} ‡§≤‡§ó‡•ç‡§® ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à‡•§ ${currentDasha ? `${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç'} ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§´‡§≤‡§§‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§ ${activeYogas.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§Ü‡§™‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•ã‡§Ç‡§ó‡•á‡•§` : '‡§Æ‡•á‡§π‡§®‡§§ ‡§î‡§∞ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§'} ‡§≠‡§ó‡§µ‡§æ‡§® ‡§ï‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è`;
      } else if (isHealthQuestion) {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡§æ ${lagna} ‡§≤‡§ó‡•ç‡§® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§†‡•Ä‡§ï ‡§π‡•à‡•§ ${currentDasha ? `${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç'} ‡§Ö‡§™‡§®‡§æ ‡§ñ‡•ç‡§Ø‡§æ‡§≤ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§£‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§ ${activeYogas.length > 0 ? '‡§Ü‡§™‡§ï‡•á ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§Ü‡§™‡§ï‡•Ä ‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§' : '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§'} ‡§∏‡§¨ ‡§†‡•Ä‡§ï ‡§π‡•ã‡§ó‡§æ‡•§ üïâÔ∏è`;
      } else if (isFinanceQuestion) {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡§æ ${lagna} ‡§≤‡§ó‡•ç‡§® ‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§Æ ‡§π‡•à‡•§ ${currentDasha ? `${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§∏‡§Æ‡§Ø ‡§Ü‡§®‡•á ‡§™‡§∞'} ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡•Å‡§ß‡§∞‡•á‡§ó‡•Ä‡•§ ${activeYogas.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ${activeYogas.length} ‡§Ø‡•ã‡§ó ‡§ß‡§® ‡§≤‡§æ‡§≠ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•ã‡§Ç‡§ó‡•á‡•§` : '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§π‡•Ä ‡§∞‡§æ‡§π ‡§™‡§∞ ‡§ö‡§≤‡•á‡§Ç‡•§'} ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ ‡§ï‡•Ä ‡§ï‡•É‡§™‡§æ ‡§π‡•ã‡§ó‡•Ä‡•§ üïâÔ∏è`;
      } else {
        return `üôè ${birthData.fullName || '‡§™‡•Å‡§§‡•ç‡§∞'}, ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡•Å‡§®‡§æ‡•§ ‡§Ü‡§™‡§ï‡§æ ${lagna} ‡§≤‡§ó‡•ç‡§® ‡§¶‡•á‡§ñ‡§ï‡§∞ ${currentDasha ? `‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§ï‡§∞` : ''} ‡§Æ‡•à‡§Ç ‡§ï‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç‡•§ ${activeYogas.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§π‡•à‡§Ç‡•§` : ''} ‡§∏‡§Æ‡§Ø ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§†‡•Ä‡§ï ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ‡•§ ‡§≠‡§ó‡§µ‡§æ‡§® ‡§™‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§∞‡§ñ‡•á‡§Ç‡•§ üïâÔ∏è`;
      }
    } else {
      if (isMarriageQuestion) {
        return `üôè Dear child, looking at your ${lagna} ascendant, ${currentDasha ? `during this ${currentDasha.planet} period` : 'in due time'} your marriage will happen. ${activeYogas.length > 0 ? `Your chart has ${activeYogas.length} auspicious yogas supporting marriage.` : 'Be patient and focus on your dharma.'} Jupiter and Venus will bless you. üïâÔ∏è`;
      } else if (isCareerQuestion) {
        return `üôè Dear child, your ${lagna} ascendant is favorable for career. ${currentDasha ? `In this ${currentDasha.planet} period` : 'In the coming time'} you will find success. ${activeYogas.length > 0 ? `The auspicious yogas in your chart will support your work.` : 'Hard work and patience will bring success.'} Divine blessings are with you. üïâÔ∏è`;
      } else if (isHealthQuestion) {
        return `üôè Dear child, your ${lagna} ascendant shows good health potential. ${currentDasha ? `During this ${currentDasha.planet} period` : 'At present'} take care of yourself. Practice yoga and pranayama. ${activeYogas.length > 0 ? 'Your auspicious yogas will protect you.' : 'Regular check-ups are beneficial.'} All will be well. üïâÔ∏è`;
      } else if (isFinanceQuestion) {
        return `üôè Dear child, your ${lagna} ascendant is excellent for wealth. ${currentDasha ? `In this ${currentDasha.planet} period` : 'In due course'} your financial situation will improve. ${activeYogas.length > 0 ? `Your chart's ${activeYogas.length} yogas will help bring prosperity.` : 'Be patient and stay on the righteous path.'} Goddess Lakshmi will bless you. üïâÔ∏è`;
      } else {
        return `üôè ${birthData.fullName || 'Dear child'}, I heard your question. Looking at your ${lagna} ascendant ${currentDasha ? `and understanding your current ${currentDasha.planet} period` : ''}, I say be patient. ${activeYogas.length > 0 ? `Your chart has ${activeYogas.length} auspicious yogas.` : ''} Time will set everything right. Trust in the divine. üïâÔ∏è`;
      }
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const suggestedQuestions = language === 'hi' ? [
    "‡§Æ‡•á‡§∞‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç?",
    "‡§Æ‡•á‡§∞‡§æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡§¨ ‡§π‡•ã‡§ó‡§æ?",
    "‡§Æ‡•á‡§∞‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    "‡§ï‡•å‡§® ‡§∏‡§æ ‡§∞‡§§‡•ç‡§® ‡§Æ‡•á‡§∞‡•á ‡§≤‡§ø‡§è ‡§∂‡•Å‡§≠ ‡§π‡•à?",
    "‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç",
    "‡§Æ‡•á‡§∞‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•à‡§∏‡•Ä ‡§π‡•à?"
  ] : [
    "What are my career prospects?",
    "When will I get married?",
    "What is the effect of my current dasha?",
    "Which gemstone is auspicious for me?",
    "Tell me remedies for business success",
    "How is my health condition?"
  ];

  // Show loading state if kundali data is not ready
  if (!kundaliData?.enhancedCalculations || !kundaliData?.birthData?.fullName) {
    return (
      <div className="h-[400px] flex flex-col bg-white">
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4"></div>
            <p className="text-gray-600">
              {language === 'hi' ? '‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : 'Loading kundali data...'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      ref={chatContainerRef}
      className="flex flex-col bg-white h-full"
      style={{ height: `${chatHeight}px` }}
    >
      {/* Header with Connection Status */}
      <div className="flex-shrink-0 p-3 bg-gradient-to-r from-orange-500 to-red-500 text-white">
        <div className="flex items-center gap-2">
          <Sparkles className="h-4 w-4 text-yellow-200" />
          <h3 className="text-sm font-semibold">
            {language === 'hi' ? "‡§ã‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ - ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ó‡•Å‡§∞‡•Å" : "Rishi Parashar - Vedic Astrology Sage"}
          </h3>
          {connectionStatus === 'error' && (
            <AlertCircle className="h-4 w-4 text-red-200" />
          )}
        </div>
        <div className="flex flex-wrap gap-1 mt-2">
          {suggestedQuestions.slice(0, 2).map((question, index) => (
            <Badge 
              key={index} 
              variant="outline" 
              className="cursor-pointer hover:bg-white/20 text-xs border-white/30 text-white hover:text-white bg-white/10 transition-colors"
              onClick={() => setInputValue(question)}
            >
              {question.length > 30 ? question.substring(0, 30) + '...' : question}
            </Badge>
          ))}
        </div>
      </div>
      
      {/* Messages Area */}
      <div className="flex-1 min-h-0">
        <ScrollArea className="h-full p-3" ref={scrollAreaRef}>
          <div className="space-y-3">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' ? 'bg-blue-600 text-white' : 'bg-gradient-to-br from-orange-400 to-red-600 text-white'
                  }`}>
                    {message.type === 'user' ? <User className="h-3 w-3" /> : <Bot className="h-3 w-3" />}
                  </div>
                  <div className={`p-2 rounded-lg ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : message.isError
                        ? 'bg-red-100 text-red-800 border border-red-200'
                        : 'bg-gradient-to-br from-orange-500 to-red-600 text-white shadow-lg'
                  }`}>
                    {message.imageUrl && (
                      <img 
                        src={message.imageUrl} 
                        alt="User uploaded" 
                        className="max-w-32 max-h-32 rounded mb-2 object-cover"
                      />
                    )}
                    <p className="text-xs whitespace-pre-wrap leading-relaxed font-medium">{message.content}</p>
                    <p className="text-xs opacity-80 mt-1">
                      {message.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-2 justify-start">
                <div className="flex gap-2 max-w-[85%]">
                  <div className="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-orange-400 to-red-600 text-white">
                    <Bot className="h-3 w-3" />
                  </div>
                  <div className="p-2 rounded-lg bg-gradient-to-br from-orange-500 to-red-600 text-white">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
      </div>

      {/* Resize Handle */}
      <div 
        className="flex items-center justify-center p-1 bg-gray-100 border-t border-gray-200 cursor-ns-resize hover:bg-gray-200 transition-colors flex-shrink-0"
        onMouseDown={handleMouseDown}
      >
        <GripHorizontal className="h-3 w-3 text-gray-400" />
      </div>
      
      {/* Input Area - Fixed at bottom */}
      <div className="flex-shrink-0 border-t border-gray-200 p-3 bg-white">
        {/* Image Preview */}
        {imagePreview && (
          <div className="mb-2 flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
            <img 
              src={imagePreview} 
              alt="Selected" 
              className="w-16 h-16 object-cover rounded"
            />
            <div className="flex-1 text-sm text-gray-600">
              {language === 'hi' ? '‡§õ‡§µ‡§ø ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à' : 'Image ready'}
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={removeImage}
              className="text-gray-500 hover:text-red-500"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        )}
        
        <div className="flex gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => fileInputRef.current?.click()}
            className="text-orange-600 hover:text-orange-700 hover:bg-orange-50 flex-shrink-0"
            disabled={isLoading}
          >
            <Image className="h-4 w-4" />
          </Button>
          
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={language === 'hi' ? "‡§ã‡§∑‡§ø ‡§ú‡•Ä ‡§∏‡•á ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç..." : "Ask Rishi ji your question..."}
            disabled={isLoading}
            className="flex-1 bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-orange-500 focus:ring-orange-500 text-sm"
          />
          
          <Button 
            onClick={handleSendMessage}
            disabled={(!inputValue.trim() && !selectedImage) || isLoading}
            size="sm"
            className={`bg-orange-500 hover:bg-orange-600 flex-shrink-0 px-3 ${
              connectionStatus === 'error' ? 'bg-red-500 hover:bg-red-600' : ''
            }`}
          >
            <Send className="h-3 w-3" />
          </Button>
        </div>
        
        {/* Hidden file input */}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleImageUpload}
          accept="image/*"
          className="hidden"
        />
        
        {connectionStatus === 'error' && (
          <p className="text-xs text-red-600 mt-1">
            {language === 'hi' ? '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' : 'Connection issue. Please try again.'}
          </p>
        )}
      </div>
    </div>
  );
};

export default RishiParasherGuru;

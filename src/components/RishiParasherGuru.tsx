import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Send, User, Sparkles, Heart, RefreshCw } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { ComprehensiveKundaliData } from '@/lib/advancedKundaliEngine';
import { useToast } from "@/hooks/use-toast";
import { Json } from '@/integrations/supabase/types';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  cached?: boolean;
}

interface RishiParasherGuruProps {
  kundaliData: ComprehensiveKundaliData;
  language: 'hi' | 'en';
}

const RishiParasherGuru: React.FC<RishiParasherGuruProps> = ({ kundaliData, language }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const getTranslation = (en: string, hi: string) => {
    return language === 'hi' ? hi : en;
  };

  // Create cache key for responses
  const getCacheKey = (query: string) => {
    if (!kundaliData?.birthData) return null;
    const { fullName, date } = kundaliData.birthData;
    return `rishi_response_${fullName}_${date}_${query}_${language}`;
  };

  // Enhanced fallback response with detailed astrological analysis
  const generateDetailedFallbackResponse = (query: string) => {
    const calculations = kundaliData?.enhancedCalculations;
    if (!calculations) {
      return language === 'hi'
        ? 'üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§µ‡§æ‡§è‡§Ç, ‡§§‡§¨ ‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ‡•§'
        : 'üôè Dear child, first create your complete Kundali, then I can provide detailed guidance.';
    }

    const lagna = calculations.lagna;
    const planets = calculations.planets;
    const houses = calculations.houses;
    const yogas = calculations.yogas?.filter(y => y.isActive) || [];
    const dashas = calculations.dashas;
    const currentDasha = dashas?.find(d => d.isActive);

    const queryLower = query.toLowerCase();

    // Career related questions
    if (queryLower.includes('career') || queryLower.includes('job') || queryLower.includes('profession') || 
        queryLower.includes('‡§ï‡§∞‡§ø‡§Ø‡§∞') || queryLower.includes('‡§®‡•å‡§ï‡§∞‡•Ä') || queryLower.includes('‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø') ||
        queryLower.includes('work') || queryLower.includes('business')) {
      
      const tenthHouse = houses?.find(h => h.houseNumber === 10);
      const sunPosition = planets?.SU;
      const marsPosition = planets?.MA;
      const jupiterPosition = planets?.JU;
      
      if (language === 'hi') {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName}, ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§ï‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶:

üåü **‡§≤‡§ó‡•ç‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® ‡§Ü‡§™‡§ï‡•ã ${getLagnaCareerTrait(lagna?.signName, 'hi')} ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§

üèõÔ∏è **‡§¶‡§∏‡§Æ ‡§≠‡§æ‡§µ**: ${tenthHouse?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ - ${getCareerHouseAnalysis(tenthHouse?.rashiName, 'hi')}

‚òÄÔ∏è **‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø**: ${sunPosition?.rashiName} ‡§∞‡§æ‡§∂‡§ø, ${sunPosition?.house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç - ${getSunCareerInfluence(sunPosition, 'hi')}

üî• **‡§Æ‡§Ç‡§ó‡§≤ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ**: ${marsPosition?.rashiName} ‡§Æ‡•á‡§Ç - ${getMarsCareerInfluence(marsPosition, 'hi')}

üéØ **‡§ó‡•Å‡§∞‡•Å ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶**: ${jupiterPosition?.rashiName} ‡§Æ‡•á‡§Ç - ${getJupiterCareerInfluence(jupiterPosition, 'hi')}

üìà **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ**: ${currentDasha?.planet || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§¶‡§∂‡§æ - ${getDashaCareerEffect(currentDasha?.planet, 'hi')}

üèÜ **‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ó**: ${yogas.length} ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç ‡§ú‡•ã ${getYogaCareerBenefit(yogas, 'hi')}

üí° **‡§∏‡•Å‡§ù‡§æ‡§µ**: ${getSpecificCareerAdvice(lagna?.signName, sunPosition, 'hi')}

üïâÔ∏è ‡§Ü‡§™‡§ï‡§æ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§â‡§ú‡•ç‡§ú‡•ç‡§µ‡§≤ ‡§π‡•à‡•§ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§Æ‡•á‡§π‡§®‡§§ ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ ‡§Ö‡§µ‡§∂‡•ç‡§Ø ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§`;
      } else {
        return `üôè Dear child ${kundaliData.birthData?.fullName}, Maharishi Parashar's blessings for your career:

üåü **Ascendant Analysis**: ${lagna?.signName} ascendant makes you ${getLagnaCareerTrait(lagna?.signName, 'en')}.

üèõÔ∏è **10th House**: Located in ${tenthHouse?.rashiName || 'Unknown'} - ${getCareerHouseAnalysis(tenthHouse?.rashiName, 'en')}

‚òÄÔ∏è **Sun Position**: In ${sunPosition?.rashiName}, ${sunPosition?.house}th house - ${getSunCareerInfluence(sunPosition, 'en')}

üî• **Mars Influence**: In ${marsPosition?.rashiName} - ${getMarsCareerInfluence(marsPosition, 'en')}

üéØ **Jupiter's Blessing**: In ${jupiterPosition?.rashiName} - ${getJupiterCareerInfluence(jupiterPosition, 'en')}

üìà **Current Dasha**: ${currentDasha?.planet || 'Unknown'} period - ${getDashaCareerEffect(currentDasha?.planet, 'en')}

üèÜ **Active Yogas**: ${yogas.length} yogas active providing ${getYogaCareerBenefit(yogas, 'en')}

üí° **Guidance**: ${getSpecificCareerAdvice(lagna?.signName, sunPosition, 'en')}

üïâÔ∏è Your future is bright. Success will come through patience and hard work.`;
      }
    }

    // Marriage related questions
    if (queryLower.includes('marriage') || queryLower.includes('wedding') || queryLower.includes('spouse') ||
        queryLower.includes('‡§∂‡§æ‡§¶‡•Ä') || queryLower.includes('‡§µ‡§ø‡§µ‡§æ‡§π') || queryLower.includes('‡§™‡§§‡§ø') || 
        queryLower.includes('‡§™‡§§‡•ç‡§®‡•Ä') || queryLower.includes('partner') || queryLower.includes('love')) {
      
      const seventhHouse = houses?.find(h => h.houseNumber === 7);
      const venusPosition = planets?.VE;
      const moonPosition = planets?.MO;
      const marsPosition = planets?.MA;
      
      if (language === 'hi') {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName}, ‡§µ‡§ø‡§µ‡§æ‡§π ‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§ï‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®:

üíï **‡§∏‡§™‡•ç‡§§‡§Æ ‡§≠‡§æ‡§µ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£**: ${seventhHouse?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç - ${getMarriageHouseAnalysis(seventhHouse?.rashiName, 'hi')}

üåπ **‡§∂‡•Å‡§ï‡•ç‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø**: ${venusPosition?.rashiName} ‡§∞‡§æ‡§∂‡§ø, ${venusPosition?.house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç - ${getVenusMarriageInfluence(venusPosition, 'hi')}

üåô **‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ**: ${moonPosition?.rashiName} ‡§Æ‡•á‡§Ç - ${getMoonMarriageInfluence(moonPosition, 'hi')}

üî• **‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑**: ${getMangalDoshaAnalysis(marsPosition, 'hi')}

‚è∞ **‡§µ‡§ø‡§µ‡§æ‡§π ‡§∏‡§Æ‡§Ø**: ${getMarriageTiming(currentDasha, planets, 'hi')}

üë´ **‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä ‡§ï‡•á ‡§ó‡•Å‡§£**: ${getSpouseQualities(seventhHouse, venusPosition, 'hi')}

üè† **‡§¶‡§æ‡§Æ‡•ç‡§™‡§§‡•ç‡§Ø ‡§ú‡•Ä‡§µ‡§®**: ${getMaritalLifePrediction(moonPosition, venusPosition, 'hi')}

üé≠ **‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ó**: ${getMarriageYogas(yogas, 'hi')}

üïâÔ∏è ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§à‡§∂‡•ç‡§µ‡§∞ ‡§ï‡•Ä ‡§ï‡•É‡§™‡§æ ‡§∏‡•á ‡§â‡§§‡•ç‡§§‡§Æ ‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§`;
      } else {
        return `üôè Dear child ${kundaliData.birthData?.fullName}, Maharishi's guidance on marriage:

üíï **7th House Analysis**: In ${seventhHouse?.rashiName || 'Unknown'} - ${getMarriageHouseAnalysis(seventhHouse?.rashiName, 'en')}

üåπ **Venus Position**: In ${venusPosition?.rashiName}, ${venusPosition?.house}th house - ${getVenusMarriageInfluence(venusPosition, 'en')}

üåô **Moon Influence**: In ${moonPosition?.rashiName} - ${getMoonMarriageInfluence(moonPosition, 'en')}

üî• **Mangal Dosha**: ${getMangalDoshaAnalysis(marsPosition, 'en')}

‚è∞ **Marriage Timing**: ${getMarriageTiming(currentDasha, planets, 'en')}

üë´ **Spouse Qualities**: ${getSpouseQualities(seventhHouse, venusPosition, 'en')}

üè† **Marital Life**: ${getMaritalLifePrediction(moonPosition, venusPosition, 'en')}

üé≠ **Active Yogas**: ${getMarriageYogas(yogas, 'en')}

üïâÔ∏è Be patient. God's grace will bring an excellent life partner.`;
      }
    }

    // Health related questions
    if (queryLower.includes('health') || queryLower.includes('medical') || queryLower.includes('disease') ||
        queryLower.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø') || queryLower.includes('‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä') || queryLower.includes('‡§∏‡•ç‡§µ‡§∏‡•ç‡§•')) {
      
      const sixthHouse = houses?.find(h => h.houseNumber === 6);
      const saturnPosition = planets?.SA;
      const moonPosition = planets?.MO;
      
      if (language === 'hi') {
        return `üôè ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName}, ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§ï‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶:

üè• **‡§∑‡§∑‡•ç‡§† ‡§≠‡§æ‡§µ**: ${sixthHouse?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç - ${getHealthHouseAnalysis(sixthHouse?.rashiName, 'hi')}

ü™ê **‡§∂‡§®‡§ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ**: ${saturnPosition?.rashiName} ‡§∞‡§æ‡§∂‡§ø, ${saturnPosition?.house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç - ${getSaturnHealthInfluence(saturnPosition, 'hi')}

üåô **‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø**: ${moonPosition?.rashiName} ‡§Æ‡•á‡§Ç - ${getMoonHealthInfluence(moonPosition, 'hi')}

‚ö° **‡§≤‡§ó‡•ç‡§® ‡§¨‡§≤**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® - ${getLagnaHealthTendency(lagna?.signName, 'hi')}

üíä **‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç**: ${getHealthCautions(saturnPosition, moonPosition, 'hi')}

üåø **‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ**: ${getHealthRemedies(lagna?.signName, moonPosition, 'hi')}

üßò **‡§Ø‡•ã‡§ó ‡§Ü‡§∏‡§®**: ${getRecommendedYogaPractices(lagna?.signName, 'hi')}

üïâÔ∏è ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§¶‡§ø‡§®‡§ö‡§∞‡•ç‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡§æ‡§§‡•ç‡§µ‡§ø‡§ï ‡§Ü‡§π‡§æ‡§∞ ‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡§®‡§æ ‡§∞‡§π‡•á‡§ó‡§æ‡•§`;
      } else {
        return `üôè Dear child ${kundaliData.birthData?.fullName}, Maharishi's blessings for health:

üè• **6th House**: In ${sixthHouse?.rashiName || 'Unknown'} - ${getHealthHouseAnalysis(sixthHouse?.rashiName, 'en')}

ü™ê **Saturn Influence**: In ${saturnPosition?.rashiName}, ${saturnPosition?.house}th house - ${getSaturnHealthInfluence(saturnPosition, 'en')}

üåô **Moon Health**: In ${moonPosition?.rashiName} - ${getMoonHealthInfluence(moonPosition, 'en')}

‚ö° **Ascendant Strength**: ${lagna?.signName} ascendant - ${getLagnaHealthTendency(lagna?.signName, 'en')}

üíä **Precautions**: ${getHealthCautions(saturnPosition, moonPosition, 'en')}

üåø **Treatment Suggestions**: ${getHealthRemedies(lagna?.signName, moonPosition, 'en')}

üßò **Yoga Practices**: ${getRecommendedYogaPractices(lagna?.signName, 'en')}

üïâÔ∏è Regular routine and sattvic diet will maintain good health.`;
      }
    }

    // General life guidance
    if (language === 'hi') {
      return `üôè ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName}, ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è:

üåü **‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§™‡§•**: ${lagna?.signName} ‡§≤‡§ó‡•ç‡§® ‡§Ü‡§™‡§ï‡•ã ${getSpiritualPath(lagna?.signName, 'hi')} ‡§ï‡•Ä ‡§ì‡§∞ ‡§≤‡•á ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

üåô **‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø**: ${planets?.MO?.rashiName} ‡§Æ‡•á‡§Ç ‡§ö‡§Ç‡§¶‡•ç‡§∞ - ${getMentalNature(planets?.MO, 'hi')}

üéØ **‡§ú‡•Ä‡§µ‡§® ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø**: ${getLifePurpose(lagna, planets?.SU, 'hi')}

üìø **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡§∞‡•ç‡§Æ**: ${currentDasha?.planet || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§¶‡§∂‡§æ - ${getCurrentKarma(currentDasha?.planet, 'hi')}

‚ú® **‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ó**: ${yogas.length} ‡§Ø‡•ã‡§ó ‡§Ü‡§™‡§ï‡•ã ${getOverallYogaBlessings(yogas, 'hi')} ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

üïâÔ∏è **‡§â‡§™‡§æ‡§∏‡§®‡§æ**: ${getRecommendedWorship(lagna?.signName, planets?.SU, 'hi')}

üíé **‡§∞‡§§‡•ç‡§® ‡§∏‡•Å‡§ù‡§æ‡§µ**: ${getGemstoneRecommendation(lagna?.signName, planets, 'hi')}

üî± ‡§ß‡§∞‡•ç‡§Æ ‡§™‡§• ‡§™‡§∞ ‡§ö‡§≤‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£ ‡§π‡•ã‡§ó‡§æ‡•§`;
    } else {
      return `üôè Dear child ${kundaliData.birthData?.fullName}, for your soul's guidance:

üåü **Soul Path**: ${lagna?.signName} ascendant leads you toward ${getSpiritualPath(lagna?.signName, 'en')}.

üåô **Mental Nature**: Moon in ${planets?.MO?.rashiName} - ${getMentalNature(planets?.MO, 'en')}

üéØ **Life Purpose**: ${getLifePurpose(lagna, planets?.SU, 'en')}

üìø **Current Karma**: ${currentDasha?.planet || 'Unknown'} period - ${getCurrentKarma(currentDasha?.planet, 'en')}

‚ú® **Active Yogas**: ${yogas.length} yogas provide you ${getOverallYogaBlessings(yogas, 'en')}.

üïâÔ∏è **Worship**: ${getRecommendedWorship(lagna?.signName, planets?.SU, 'en')}

üíé **Gemstone**: ${getGemstoneRecommendation(lagna?.signName, planets, 'en')}

üî± Continue on the righteous path. Your welfare is assured.`;
    }
  };

  // Helper functions for detailed analysis
  const getLagnaCareerTrait = (sign: string | undefined, lang: string) => {
    if (!sign) return lang === 'hi' ? '‡§è‡§ï ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ' : 'a balanced personality';
    
    const traits: Record<string, { hi: string; en: string }> = {
      'Aries': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞', en: 'a natural leader' },
      'Taurus': { hi: '‡§ß‡•à‡§∞‡•ç‡§Ø‡§µ‡§æ‡§® ‡§î‡§∞ ‡§¶‡•É‡§¢‡§º ‡§∏‡§Ç‡§ï‡§≤‡•ç‡§™‡§ø‡§§', en: 'patient and determined' },
      'Gemini': { hi: '‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§î‡§∞ ‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§ï‡•Å‡§∂‡§≤', en: 'intelligent and communicative' },
      'Cancer': { hi: '‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ', en: 'emotional and caring' },
      'Leo': { hi: '‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§∂‡§æ‡§≤‡•Ä', en: 'creative and influential' },
      'Virgo': { hi: '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ‡§µ‡§æ‡§¶‡•Ä', en: 'analytical and perfectionist' },
      'Libra': { hi: '‡§®‡•ç‡§Ø‡§æ‡§Ø‡§™‡•ç‡§∞‡§ø‡§Ø ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§', en: 'justice-loving and balanced' },
      'Scorpio': { hi: '‡§ó‡§π‡§® ‡§ö‡§ø‡§Ç‡§§‡§ï ‡§î‡§∞ ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø', en: 'deep thinker and mysterious' },
      'Sagittarius': { hi: '‡§¶‡§æ‡§∞‡•ç‡§∂‡§®‡§ø‡§ï ‡§î‡§∞ ‡§∏‡§æ‡§π‡§∏‡•Ä', en: 'philosophical and adventurous' },
      'Capricorn': { hi: '‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§ø‡§§ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ï‡§æ‡§Ç‡§ï‡•ç‡§∑‡•Ä', en: 'disciplined and ambitious' },
      'Aquarius': { hi: '‡§®‡§µ‡§æ‡§ö‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§Æ‡§æ‡§®‡§µ‡§§‡§æ‡§µ‡§æ‡§¶‡•Ä', en: 'innovative and humanitarian' },
      'Pisces': { hi: '‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø‡§∂‡•Ä‡§≤', en: 'artistic and compassionate' }
    };
    
    return traits[sign]?.[lang] || (lang === 'hi' ? '‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§∏‡•á ‡§Ø‡•Å‡§ï‡•ç‡§§' : 'endowed with special qualities');
  };

  const getCareerHouseAnalysis = (sign: string | undefined, lang: string) => {
    if (!sign) return lang === 'hi' ? '‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï' : 'balance needed in career';
    
    const analysis: Record<string, { hi: string; en: string }> = {
      'Aries': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§â‡§§‡•ç‡§§‡§Æ', en: 'leadership and management fields excellent' },
      'Taurus': { hi: '‡§µ‡§ø‡§§‡•ç‡§§ ‡§î‡§∞ ‡§ï‡§≤‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ', en: 'success in finance and arts' },
      'Gemini': { hi: '‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§î‡§∞ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§ö‡§Æ‡§ï', en: 'shine in communication and media' },
      'Cancer': { hi: '‡§∏‡•á‡§µ‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤', en: 'service and healthcare favorable' },
      'Leo': { hi: '‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§® ‡§î‡§∞ ‡§∞‡§æ‡§ú‡§®‡•Ä‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§â‡§®‡•ç‡§®‡§§‡§ø', en: 'progress in entertainment and politics' },
      'Virgo': { hi: '‡§§‡§ï‡§®‡•Ä‡§ï ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§†', en: 'technology and analytical work best' },
      'Libra': { hi: '‡§ï‡§æ‡§®‡•Ç‡§® ‡§î‡§∞ ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§', en: 'law and justice field suitable' },
      'Scorpio': { hi: '‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§î‡§∞ ‡§∞‡§π‡§∏‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§¶‡•ç‡§ß‡§ø', en: 'mastery in research and mystery work' },
      'Sagittarius': { hi: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§ß‡§∞‡•ç‡§Æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§≤‡§æ‡§≠', en: 'benefit in education and religion' },
      'Capricorn': { hi: '‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§® ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø', en: 'growth in administration and business' },
      'Aquarius': { hi: '‡§§‡§ï‡§®‡•Ä‡§ï ‡§î‡§∞ ‡§∏‡§Æ‡§æ‡§ú ‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§Æ', en: 'fame in technology and social service' },
      'Pisces': { hi: '‡§ï‡§≤‡§æ ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ', en: 'success in arts and spirituality' }
    };
    
    return analysis[sign]?.[lang] || (lang === 'hi' ? '‡§µ‡§ø‡§µ‡§ø‡§ß ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ö‡§µ‡§∏‡§∞' : 'opportunities in various fields');
  };

  // Helper functions for enhanced analysis need to be added
  const getSunCareerInfluence = (sun: any, lang: string) => {
    if (!sun) return lang === 'hi' ? '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø' : 'leadership ability normal';
    
    const influences: Record<string, { hi: string; en: string }> = {
      'Aries': { hi: '‡§â‡§¶‡•ç‡§Ø‡§Æ‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§™‡•ç‡§∞‡§¨‡§≤', en: 'strong entrepreneurial spirit' },
      'Leo': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ', en: 'natural talent in leadership' },
      'Capricorn': { hi: '‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§®‡§ø‡§ï ‡§ï‡•Å‡§∂‡§≤‡§§‡§æ ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü', en: 'excellent administrative skills' }
    };
    
    return influences[sun.rashiName]?.[lang] || (lang === 'hi' ? '‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§ï‡•Å‡§∂‡§≤‡§§‡§æ ‡§Ö‡§ö‡•ç‡§õ‡•Ä' : 'good professional skills');
  };

  const getMarsCareerInfluence = (mars: any, lang: string) => {
    if (!mars) return lang === 'hi' ? '‡§ä‡§∞‡•ç‡§ú‡§æ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§' : 'energy balanced';
    
    const influences: Record<string, { hi: string }> = {
      'Aries': { hi: '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ' },
      'Capricorn': { hi: '‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡§¶‡•ç‡§ß‡§§‡§ø' },
      'Scorpio': { hi: '‡§ó‡§π‡§® ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ' }
    };
    
    return influences[mars.rashiName]?.[lang] || (lang === 'hi' ? '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§¶‡•É‡§¢‡§º‡§§‡§æ' : 'firmness in work');
  };

  const getJupiterCareerInfluence = (jupiter: any, lang: string) => {
    if (!jupiter) return lang === 'hi' ? '‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§ñ‡•ã‡§ú' : 'quest for knowledge';
    
    return lang === 'hi' ? '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§Æ‡•á‡§Ç ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§†‡§§‡§æ' : 'excellence in education and counseling';
  };

  const getDashaCareerEffect = (planet: string | undefined, lang: string) => {
    if (!planet) return lang === 'hi' ? '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : 'balanced progress';
    
    const effects: Record<string, { hi: string; en: string }> = {
      'SU': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞ ‡§Ü‡§è‡§Ç‡§ó‡•á', en: 'leadership opportunities will come' },
      'JU': { hi: '‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä', en: 'knowledge-based success will come' },
      'VE': { hi: '‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≤‡§æ‡§≠', en: 'benefit in artistic works' }
    };
    
    return effects[planet]?.[lang] || (lang === 'hi' ? '‡§ß‡•Ä‡§Æ‡•Ä ‡§™‡§∞ ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø' : 'slow but steady progress');
  };

  const getYogaCareerBenefit = (yogas: any[], lang: string) => {
    if (yogas.length === 0) return lang === 'hi' ? '‡§Æ‡•á‡§π‡§®‡§§ ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä' : 'success through hard work';
    
    return lang === 'hi' ? '‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ø‡•ã‡§ó ‡§ï‡§æ ‡§≤‡§æ‡§≠' : 'special career yoga benefits';
  };

  const getSpecificCareerAdvice = (lagna: string | undefined, sun: any, lang: string) => {
    if (!lagna) return lang === 'hi' ? '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§∞‡•á‡§Ç' : 'have patience and work hard';
    
    const advice: Record<string, { hi: string; en: string }> = {
      'Aries': { hi: '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç', en: 'accept leadership roles' },
      'Taurus': { hi: '‡§∏‡•ç‡§•‡§ø‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ', en: 'success in stable business' },
      'Gemini': { hi: '‡§∏‡§Ç‡§ö‡§æ‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç', en: 'advance in communication field' }
    };
    
    return advice[lagna]?.[lang] || (lang === 'hi' ? '‡§Ö‡§™‡§®‡•Ä ‡§∞‡•Å‡§ö‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç' : 'work according to your interests');
  };

  // Marriage related helper functions
  const getMarriageHouseAnalysis = (sign: string | undefined, lang: string) => {
    if (!sign) return lang === 'hi' ? '‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ ‡§µ‡•à‡§µ‡§æ‡§π‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§®' : 'normal married life';
    
    const analysis: Record<string, { hi: string; en: string }> = {
      'Venus': { hi: '‡§™‡•ç‡§∞‡•á‡§Æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ', en: 'possibility of love marriage' },
      'Jupiter': { hi: '‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ', en: 'ideal life partner will be found' }
    };
    
    return analysis[sign]?.[lang] || (lang === 'hi' ? '‡§∏‡•Å‡§ñ‡•Ä ‡§µ‡•à‡§µ‡§æ‡§π‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§®' : 'happy married life');
  };

  const getVenusMarriageInfluence = (venus: any, lang: string) => {
    if (!venus) return lang === 'hi' ? '‡§™‡•ç‡§∞‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§§‡•Å‡§≤‡§®' : 'balance in love';
    
    return lang === 'hi' ? '‡§∞‡•ã‡§Æ‡§æ‡§Ç‡§ü‡§ø‡§ï ‡§î‡§∞ ‡§∏‡•Å‡§ñ‡•Ä ‡§∞‡§ø‡§∂‡•ç‡§§‡§æ' : 'romantic and happy relationship';
  };

  const getMoonMarriageInfluence = (moon: any, lang: string) => {
    if (!moon) return lang === 'hi' ? '‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ' : 'emotional stability';
    
    return lang === 'hi' ? '‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§§‡§æ‡§≤‡§Æ‡•á‡§≤ ‡§â‡§§‡•ç‡§§‡§Æ' : 'excellent mental compatibility';
  };

  const getMangalDoshaAnalysis = (mars: any, lang: string) => {
    if (!mars) return lang === 'hi' ? '‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ ‡§®‡§π‡•Ä‡§Ç' : 'no mangal dosha';
    
    if (mars.house === 1 || mars.house === 4 || mars.house === 7 || mars.house === 8 || mars.house === 12) {
      return lang === 'hi' ? '‡§π‡§≤‡•ç‡§ï‡§æ ‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ - ‡§â‡§™‡§æ‡§Ø ‡§ï‡§∞‡•á‡§Ç' : 'mild mangal dosha - perform remedies';
    }
    
    return lang === 'hi' ? '‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑ ‡§®‡§π‡•Ä‡§Ç' : 'no mangal dosha';
  };

  const getMarriageTiming = (dasha: any, planets: any, lang: string) => {
    if (!dasha) return lang === 'hi' ? '25-30 ‡§µ‡§∞‡•ç‡§∑ ‡§ï‡•Ä ‡§Ü‡§Ø‡•Å ‡§â‡§§‡•ç‡§§‡§Æ' : 'age 25-30 is best';
    
    return lang === 'hi' ? '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§µ‡§æ‡§π ‡§Ø‡•ã‡§ó' : 'marriage yoga in current dasha';
  };

  const getSpouseQualities = (seventhHouse: any, venus: any, lang: string) => {
    return lang === 'hi' ? '‡§∏‡•Å‡§Ç‡§¶‡§∞, ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§î‡§∞ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§æ‡§∞‡•Ä ‡§ú‡•Ä‡§µ‡§®‡§∏‡§æ‡§•‡•Ä' : 'beautiful, intelligent and cultured spouse';
  };

  const getMaritalLifePrediction = (moon: any, venus: any, lang: string) => {
    return lang === 'hi' ? '‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡§Æ‡§ù‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§¶‡§æ‡§Æ‡•ç‡§™‡§§‡•ç‡§Ø ‡§ú‡•Ä‡§µ‡§®' : 'married life filled with love and understanding';
  };

  const getMarriageYogas = (yogas: any[], lang: string) => {
    return lang === 'hi' ? '‡§∂‡•Å‡§≠ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§Ø‡•ã‡§ó ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§' : 'auspicious marriage yogas present';
  };

  // Health related helper functions
  const getHealthHouseAnalysis = (sign: string | undefined, lang: string) => {
    return lang === 'hi' ? '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§É ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø' : 'generally good health';
  };

  const getSaturnHealthInfluence = (saturn: any, lang: string) => {
    if (!saturn) return lang === 'hi' ? '‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç' : 'take care of bones';
    
    return lang === 'hi' ? '‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§î‡§∞ ‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç' : 'take care of joints and bones';
  };

  const getMoonHealthInfluence = (moon: any, lang: string) => {
    if (!moon) return lang === 'hi' ? '‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§†‡•Ä‡§ï' : 'mental health fine';
    
    return lang === 'hi' ? '‡§™‡•á‡§ü ‡§î‡§∞ ‡§Æ‡§® ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç' : 'take care of both stomach and mind';
  };

  const getLagnaHealthTendency = (sign: string | undefined, lang: string) => {
    return lang === 'hi' ? '‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ' : 'strong physical constitution';
  };

  const getHealthCautions = (saturn: any, moon: any, lang: string) => {
    return lang === 'hi' ? '‡§§‡§®‡§æ‡§µ ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡§æ‡§Æ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç' : 'avoid stress and overwork';
  };

  const getHealthRemedies = (lagna: string | undefined, moon: any, lang: string) => {
    return lang === 'hi' ? '‡§Ø‡•ã‡§ó, ‡§™‡•ç‡§∞‡§æ‡§£‡§æ‡§Ø‡§æ‡§Æ ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞' : 'yoga, pranayama and balanced diet';
  };

  const getRecommendedYogaPractices = (sign: string | undefined, lang: string) => {
    return lang === 'hi' ? '‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§®' : 'sun salutation and meditation';
  };

  // Spiritual guidance helper functions
  const getSpiritualPath = (sign: string | undefined, lang: string) => {
    return lang === 'hi' ? '‡§ß‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ' : 'religion and spirituality';
  };

  const getMentalNature = (moon: any, lang: string) => {
    return lang === 'hi' ? '‡§∂‡§æ‡§Ç‡§§ ‡§î‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞‡§∂‡•Ä‡§≤ ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ' : 'calm and thoughtful nature';
  };

  const getLifePurpose = (lagna: any, sun: any, lang: string) => {
    return lang === 'hi' ? '‡§∏‡§Æ‡§æ‡§ú ‡§∏‡•á‡§µ‡§æ ‡§î‡§∞ ‡§Ü‡§§‡•ç‡§Æ ‡§µ‡§ø‡§ï‡§æ‡§∏' : 'social service and self-development';
  };

  const getCurrentKarma = (planet: string | undefined, lang: string) => {
    return lang === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡•á ‡§ï‡§∞‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§´‡§≤ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ' : 'fruits of good deeds will come';
  };

  const getOverallYogaBlessings = (yogas: any[], lang: string) => {
    return lang === 'hi' ? '‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ ‡§î‡§∞ ‡§ñ‡•Å‡§∂‡•Ä' : 'success and happiness in life';
  };

  const getRecommendedWorship = (lagna: string | undefined, sun: any, lang: string) => {
    return lang === 'hi' ? '‡§≠‡§ó‡§µ‡§æ‡§® ‡§µ‡§ø‡§∑‡•ç‡§£‡•Å ‡§î‡§∞ ‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§¶‡•á‡§µ ‡§ï‡•Ä ‡§â‡§™‡§æ‡§∏‡§®‡§æ' : 'worship Lord Vishnu and Sun God';
  };

  const getGemstoneRecommendation = (lagna: string | undefined, planets: any, lang: string) => {
    return lang === 'hi' ? '‡§™‡•Å‡§ñ‡§∞‡§æ‡§ú ‡§Ø‡§æ ‡§Æ‡•ã‡§§‡•Ä ‡§ß‡§æ‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç' : 'wear yellow sapphire or pearl';
  };

  // Check cached response
  const getCachedResponse = (query: string) => {
    const cacheKey = getCacheKey(query);
    if (!cacheKey) return null;
    
    try {
      const cached = localStorage.getItem(cacheKey);
      if (cached) {
        const parsedData = JSON.parse(cached);
        const cacheTime = new Date(parsedData.timestamp);
        const now = new Date();
        const hoursDiff = (now.getTime() - cacheTime.getTime()) / (1000 * 60 * 60);
        
        if (hoursDiff < 6) { // Cache for 6 hours
          return parsedData.response;
        } else {
          localStorage.removeItem(cacheKey);
        }
      }
    } catch (error) {
      console.log('Cache read error:', error);
    }
    return null;
  };

  // Save response to cache
  const setCachedResponse = (query: string, response: string) => {
    const cacheKey = getCacheKey(query);
    if (!cacheKey) return;
    
    try {
      const cacheData = {
        response,
        timestamp: new Date().toISOString()
      };
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
    } catch (error) {
      console.log('Cache write error:', error);
    }
  };

  useEffect(() => {
    if (!kundaliData || !kundaliData.enhancedCalculations) {
      const fallbackMessage: Message = {
        id: '1',
        type: 'ai',
        content: language === 'hi' 
          ? 'üôè ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞! ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Ç‡•§ ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç, ‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ üïâÔ∏è'
          : 'üôè Hello dear child! I am Maharishi Parashar. Create your birth chart first, then I can help you. üïâÔ∏è',
        timestamp: new Date()
      };
      setMessages([fallbackMessage]);
      return;
    }

    const lagna = kundaliData.enhancedCalculations.lagna;
    const planets = kundaliData.enhancedCalculations.planets;
    const activeYogas = kundaliData.enhancedCalculations.yogas?.filter(y => y.isActive) || [];
    
    const welcomeMessage: Message = {
      id: '1',
      type: 'ai',
      content: language === 'hi' 
        ? `üôè ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞ ${kundaliData.birthData?.fullName || ''}, ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Ç‡•§

üåü ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§™‡§•: ${lagna?.signName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§≤‡§ó‡•ç‡§®
üåô ‡§ö‡§Ç‡§¶‡•ç‡§∞: ${planets?.MO?.rashiName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'} ‡§∞‡§æ‡§∂‡§ø
üéØ ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø

‡§Ö‡§™‡§®‡•Ä ‡§ï‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç! üí´`
        : `üôè Dear child ${kundaliData.birthData?.fullName || ''}, I am Maharishi Parashar.

üåü Soul Path: ${lagna?.signName || 'Unknown'} ascendant
üåô Moon: ${planets?.MO?.rashiName || 'Unknown'}
üéØ ${activeYogas.length} beneficial yogas active

Ask about your karmic journey! üí´`,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [kundaliData, language]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputValue;
    setInputValue('');
    setIsLoading(true);

    try {
      if (!kundaliData) {
        throw new Error('No birth chart data available');
      }

      // Check cache first
      const cachedResponse = getCachedResponse(currentInput);
      if (cachedResponse) {
        const aiMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: cachedResponse,
          timestamp: new Date(),
          cached: true
        };
        setMessages(prev => [...prev, aiMessage]);
        setRetryCount(0);
        return;
      }
      
      // Try AI with reduced timeout for faster fallback
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('AI timeout')), 5000)
      );
      
      const aiPromise = supabase.functions.invoke('kundali-ai-analysis', {
        body: {
          kundaliData,
          userQuery: currentInput,
          language,
          retryAttempt: retryCount
        }
      });

      const { data, error } = await Promise.race([aiPromise, timeoutPromise]) as any;

      if (error) {
        throw error;
      }

      if (!data || !data.analysis) {
        throw new Error('No response received');
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: data.analysis,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setCachedResponse(currentInput, data.analysis);
      setRetryCount(0);

      // Store conversation with error handling
      try {
        await supabase.from('rishi_parasher_conversations').insert({
          user_question: currentInput,
          rishi_response: data.analysis,
          kundali_context: kundaliData as unknown as Json,
          session_id: `karmic_session_${Date.now()}`
        });
      } catch (insertError) {
        console.log('Conversation storage failed:', insertError);
      }

    } catch (error) {
      console.log('AI failed, using enhanced fallback:', error);
      
      // Increment retry count
      setRetryCount(prev => prev + 1);
      
      // Use enhanced detailed fallback response
      const enhancedFallbackResponse = generateDetailedFallbackResponse(currentInput);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: enhancedFallbackResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setCachedResponse(currentInput, enhancedFallbackResponse);
      
      // Show user-friendly toast only on first retry
      if (retryCount === 0) {
        toast({
          title: language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§ï‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶" : "Maharishi's Blessing",
          description: language === 'hi' ? "‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® ‡§∏‡•á ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®" : "Detailed guidance from Vedic wisdom",
          variant: "default"
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    setMessages(messages.slice(0, 1)); // Keep welcome message
    setRetryCount(0);
    toast({
      title: language === 'hi' ? "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º" : "Chat Cleared",
      description: language === 'hi' ? "‡§®‡§à ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞" : "Ready for fresh start"
    });
  };

  const suggestedQuestions = language === 'hi' ? [
    "‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®?",
    "‡§µ‡§ø‡§µ‡§æ‡§π ‡§Ø‡•ã‡§ó?",
    "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ?",
    "‡§ß‡§® ‡§Ø‡•ã‡§ó?"
  ] : [
    "Career guidance?",
    "Marriage yoga?",
    "Health advice?",
    "Wealth yoga?"
  ];

  return (
    <Card className="h-[450px] flex flex-col bg-gradient-to-br from-purple-50 via-orange-50 to-red-50 border-purple-200">
      <CardHeader className="pb-2 bg-gradient-to-r from-purple-100 via-orange-100 to-red-100 px-3 py-2">
        <CardTitle className="flex items-center justify-between text-purple-800 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-6 h-6 rounded-full bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 flex items-center justify-center overflow-hidden">
              <img 
                src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                alt="Rishi Parasher" 
                className="w-full h-full object-cover"
              />
            </div>
            <span className="flex items-center gap-1">
              <Heart className="h-3 w-3 text-purple-600" />
              {language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞" : "Rishi Parashar"}
              <Sparkles className="h-3 w-3 text-orange-500" />
            </span>
          </div>
          <Button
            onClick={clearChat}
            variant="ghost"
            size="sm"
            className="h-6 w-6 p-0 text-purple-600 hover:bg-purple-200"
          >
            <RefreshCw className="h-3 w-3" />
          </Button>
        </CardTitle>
        <div className="flex flex-wrap gap-1">
          {suggestedQuestions.map((question, index) => (
            <Badge 
              key={index} 
              variant="outline" 
              className="cursor-pointer hover:bg-purple-200 text-xs border-purple-300 text-purple-700 hover:text-purple-900 bg-purple-50 px-1 py-0.5"
              onClick={() => setInputValue(question)}
            >
              {question}
            </Badge>
          ))}
        </div>
        {retryCount > 0 && (
          <div className="text-xs text-orange-600 bg-orange-50 px-2 py-1 rounded">
            {language === 'hi' ? `‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® ‡§Æ‡•ã‡§° ${retryCount}/3` : `Vedic wisdom mode ${retryCount}/3`}
          </div>
        )}
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col p-0">
        <ScrollArea className="flex-1 p-2 max-h-[300px]" ref={scrollAreaRef}>
          <div className="space-y-2">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="h-3 w-3" />
                    ) : (
                      <img 
                        src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                        alt="Rishi Parasher" 
                        className="w-full h-full object-cover"
                      />
                    )}
                  </div>
                  <div className={`p-2 rounded-lg shadow-sm relative ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white'
                  }`}>
                    <p className="text-xs whitespace-pre-wrap leading-relaxed">{message.content}</p>
                    <p className="text-xs opacity-80 mt-1 flex items-center gap-1">
                      {message.timestamp.toLocaleTimeString()}
                      {message.cached && <span title={language === 'hi' ? '‡§ï‡•à‡§∂‡•ç‡§°' : 'Cached'}>üíæ</span>}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-2 justify-start">
                <div className="flex gap-2 max-w-[85%]">
                  <div className="w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white overflow-hidden">
                    <img 
                      src="/lovable-uploads/8cb18da4-1ec3-40d2-8e2d-5f0efcfc10da.png" 
                      alt="Rishi Parasher" 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-2 rounded-lg bg-gradient-to-br from-purple-500 via-orange-500 to-red-600 text-white">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        <div className="p-2 border-t border-purple-200 bg-white">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'hi' ? "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç..." : "Ask question..."}
              disabled={isLoading}
              className="flex-1 bg-white border-purple-300 text-gray-900 placeholder-gray-500 text-xs h-8"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              size="sm"
              className="bg-gradient-to-r from-purple-500 via-orange-500 to-red-600 hover:from-purple-600 hover:via-orange-600 hover:to-red-700 h-8 w-8 p-0"
            >
              <Send className="h-3 w-3" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default RishiParasherGuru;

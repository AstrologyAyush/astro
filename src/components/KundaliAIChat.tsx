import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Send, Bot, User, Sparkles } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { KundaliChart as KundaliChartType, BirthData } from '@/lib/kundaliUtils';
import { NumerologyProfile } from '@/lib/numerologyUtils';
import { useToast } from "@/hooks/use-toast";

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

interface KundaliAIChatProps {
  kundaliData: {
    birthData: BirthData & { fullName: string };
    chart: KundaliChartType;
    enhancedCalculations?: any; // Make optional for flexibility
  };
  language: 'hi' | 'en';
  numerologyData?: NumerologyProfile;
}

const KundaliAIChat: React.FC<KundaliAIChatProps> = ({ kundaliData, language, numerologyData }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [apiStatus, setApiStatus] = useState<'checking' | 'available' | 'fallback'>('checking');
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    // Check if chart data is available before accessing its properties
    if (!kundaliData?.chart || !kundaliData?.birthData?.fullName) {
      console.log('Waiting for kundali data to load...');
      return;
    }

    // Test API status first
    checkApiStatus();

    // Enhanced welcome message with personalized insights
    const personalizedWelcome = getPersonalizedWelcomeMessage();
    const welcomeMessage: Message = {
      id: '1',
      type: 'ai',
      content: personalizedWelcome,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [kundaliData?.birthData?.fullName, kundaliData?.chart, language]);

  const checkApiStatus = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('kundali-ai-analysis', {
        body: {
          kundaliData,
          userQuery: 'test',
          language,
          analysisType: 'api_test'
        }
      });

      if (error) throw error;
      
      setApiStatus(data?.source === 'gemini' ? 'available' : 'fallback');
    } catch (error) {
      setApiStatus('fallback');
    }
  };

  const getPersonalizedWelcomeMessage = (): string => {
    const chart = kundaliData.chart;
    const enhancedCalc = kundaliData.enhancedCalculations;
    const currentDasha = enhancedCalc?.dashas?.find(d => d.isActive) || chart.dashas?.find(d => d.isActive);
    const strongYogas = chart.yogas?.filter(y => y.present && y.strength > 60) || [];
    
    if (language === 'hi') {
      return `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ${kundaliData.birthData.fullName}! üôè

‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§®‡•ç‡§Æ‡§™‡§§‡•ç‡§∞‡§ø‡§ï‡§æ ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å:

‚ú® **‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ó‡•ç‡§®:** ${chart.ascendantSanskrit || enhancedCalc?.lagna?.signName || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§'}
${currentDasha ? `üåô **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ:** ${currentDasha.planet} (${new Date(currentDasha.endDate).getFullYear()} ‡§§‡§ï)` : ''}
${strongYogas.length > 0 ? `üîÆ **‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ø‡•ã‡§ó:** ${strongYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç` : ''}

‡§Ü‡§™‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•Ä ‡§ñ‡§æ‡§∏‡§ø‡§Ø‡§§ ‡§Ø‡§π ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ${getLagnaCharacteristics(enhancedCalc?.lagna?.signName || chart.ascendantSanskrit, 'hi')}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç - ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§`;
    } else {
      return `Namaste ${kundaliData.birthData.fullName}! üôè

I am Maharishi Parashar. Looking at your birth chart, I can tell:

‚ú® **Your Ascendant:** ${chart.ascendantSanskrit || enhancedCalc?.lagna?.signName || 'Unknown'}
${currentDasha ? `üåô **Current Dasha:** ${currentDasha.planet} (until ${new Date(currentDasha.endDate).getFullYear()})` : ''}
${strongYogas.length > 0 ? `üîÆ **Special Yogas:** ${strongYogas.length} auspicious yogas are active` : ''}

Your personality shows that you are ${getLagnaCharacteristics(enhancedCalc?.lagna?.signName || chart.ascendantSanskrit, 'en')}

Please ask your question - I will guide you according to your Kundali.`;
    }
  };

  const getLagnaCharacteristics = (lagna: string, lang: string): string => {
    const characteristics = {
      'Aries': lang === 'hi' ? '‡§∏‡§æ‡§π‡§∏‡•Ä, ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ ‡§∞‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§ï‡•á ‡§π‡•à‡§Ç‡•§' : 'courageous, natural leaders with an independent nature.',
      'Taurus': lang === 'hi' ? '‡§ß‡•à‡§∞‡•ç‡§Ø‡§µ‡§æ‡§®, ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§î‡§∞ ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§ï‡•á ‡§™‡•ç‡§∞‡•á‡§Æ‡•Ä ‡§π‡•à‡§Ç‡•§' : 'patient, stable and lovers of beauty.',
      'Gemini': lang === 'hi' ? '‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®, ‡§∏‡§Ç‡§µ‡§æ‡§¶‡§™‡•ç‡§∞‡§ø‡§Ø ‡§î‡§∞ ‡§¨‡§π‡•Å‡§Æ‡•Å‡§ñ‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ ‡§ï‡•á ‡§ß‡§®‡•Ä ‡§π‡•à‡§Ç‡•§' : 'intelligent, communicative and multi-talented.',
      'Cancer': lang === 'hi' ? '‡§≠‡§æ‡§µ‡•Å‡§ï, ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§î‡§∞ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ‡§ï‡•á ‡§π‡•à‡§Ç‡•§' : 'emotional, family-oriented and naturally caring.',
      'Leo': lang === 'hi' ? '‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡•Ä, ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§™‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§π‡•à‡§Ç‡•§' : 'confident, creative and naturally commanding respect.',
      'Virgo': lang === 'hi' ? '‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï, ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§∂‡§®‡§ø‡§∏‡•ç‡§ü ‡§π‡•à‡§Ç‡•§' : 'practical, analytical and perfectionist by nature.',
      'Libra': lang === 'hi' ? '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§, ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§™‡•ç‡§∞‡§ø‡§Ø ‡§î‡§∞ ‡§∏‡•å‡§Ç‡§¶‡§∞‡•ç‡§Ø‡§™‡•ç‡§∞‡•á‡§Æ‡•Ä ‡§π‡•à‡§Ç‡•§' : 'balanced, justice-loving and aesthetically inclined.',
      'Scorpio': lang === 'hi' ? '‡§ó‡§π‡§®, ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø ‡§î‡§∞ ‡§¶‡•É‡§¢‡§º ‡§∏‡§Ç‡§ï‡§≤‡•ç‡§™ ‡§µ‡§æ‡§≤‡•á ‡§π‡•à‡§Ç‡•§' : 'intense, mysterious and deeply determined.',
      'Sagittarius': lang === 'hi' ? '‡§¶‡§æ‡§∞‡•ç‡§∂‡§®‡§ø‡§ï, ‡§∏‡§æ‡§π‡§∏‡•Ä ‡§î‡§∞ ‡§∏‡§§‡•ç‡§Ø ‡§ï‡•á ‡§ñ‡•ã‡§ú‡•Ä ‡§π‡•à‡§Ç‡•§' : 'philosophical, adventurous and seekers of truth.',
      'Capricorn': lang === 'hi' ? '‡§Æ‡§π‡§§‡•ç‡§µ‡§æ‡§ï‡§æ‡§Ç‡§ï‡•ç‡§∑‡•Ä, ‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§ø‡§§ ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø-‡§â‡§®‡•ç‡§Æ‡•Å‡§ñ ‡§π‡•à‡§Ç‡•§' : 'ambitious, disciplined and goal-oriented.',
      'Aquarius': lang === 'hi' ? '‡§Æ‡§æ‡§®‡§µ‡§§‡§æ‡§µ‡§æ‡§¶‡•Ä, ‡§Ö‡§≠‡§ø‡§®‡§µ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞‡§ï ‡§π‡•à‡§Ç‡•§' : 'humanitarian, innovative and independent thinkers.',
      'Pisces': lang === 'hi' ? '‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï, ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø‡§∂‡•Ä‡§≤ ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§ï‡•á ‡§π‡•à‡§Ç‡•§' : 'artistic, compassionate and spiritually inclined.'
    };
    
    return characteristics[lagna] || (lang === 'hi' ? '‡§Ö‡§®‡•Ç‡§†‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•á ‡§ß‡§®‡•Ä ‡§π‡•à‡§Ç‡•§' : 'unique and special in nature.');
  };

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const generatePersonalizedResponse = (query: string): string => {
    const chart = kundaliData.chart;
    const enhancedCalc = kundaliData.enhancedCalculations;
    const currentDasha = enhancedCalc?.dashas?.find(d => d.isActive) || chart.dashas?.find(d => d.isActive);
    const planets = enhancedCalc?.planets || chart.planets;
    const queryLower = query.toLowerCase();

    // Marriage/Love questions
    if (queryLower.includes('marr') || queryLower.includes('‡§∂‡§æ‡§¶‡•Ä') || queryLower.includes('‡§µ‡§ø‡§µ‡§æ‡§π') || queryLower.includes('love')) {
      const venus = planets.Venus;
      const mars = planets.Mars;
      const jupiter = planets.Jupiter;
      
      if (language === 'hi') {
        return `üå∫ **‡§µ‡§ø‡§µ‡§æ‡§π ‡§î‡§∞ ‡§™‡•ç‡§∞‡•á‡§Æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®** üå∫

‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞:
${venus ? `‚Ä¢ ‡§∂‡•Å‡§ï‡•ç‡§∞ ${venus.rashiName} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç ${venus.house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•à ${venus.isExalted ? '(‡§â‡§ö‡•ç‡§ö)' : venus.isDebilitated ? '(‡§®‡•Ä‡§ö)' : ''}` : ''}
${mars ? `‚Ä¢ ‡§Æ‡§Ç‡§ó‡§≤ ${mars.rashiName} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à` : ''}
${currentDasha ? `‚Ä¢ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ${currentDasha.planet} ‡§¶‡§∂‡§æ ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à` : ''}

**‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Æ‡§Ø:** ${getMarriageTimingHindi(currentDasha, venus, jupiter)}

**‡§∏‡•Å‡§ù‡§æ‡§µ:** 
‚Ä¢ ${getMarriageAdviceHindi(venus, mars)}
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∂‡•Å‡§ï‡•ç‡§∞ ‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§ú‡§æ‡§™ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§∏‡§´‡•á‡§¶ ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§ß‡§æ‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§ó‡•Å‡§≤‡§æ‡§¨ ‡§ú‡§≤ ‡§∏‡•á ‡§∏‡•ç‡§®‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç`;
      } else {
        return `üå∫ **Marriage & Love Guidance** üå∫

According to your chart:
${venus ? `‚Ä¢ Venus in ${venus.rashiName} in ${venus.house}th house ${venus.isExalted ? '(Exalted)' : venus.isDebilitated ? '(Debilitated)' : ''}` : ''}
${mars ? `‚Ä¢ Mars positioned in ${mars.rashiName}` : ''}
${currentDasha ? `‚Ä¢ Currently running ${currentDasha.planet} dasha` : ''}

**Potential Timing:** ${getMarriageTimingEnglish(currentDasha, venus, jupiter)}

**Recommendations:**
‚Ä¢ ${getMarriageAdviceEnglish(venus, mars)}
‚Ä¢ Chant Venus mantras regularly
‚Ä¢ Wear white on Fridays
‚Ä¢ Use rose water for bathing`;
      }
    }

    // Career questions
    if (queryLower.includes('career') || queryLower.includes('job') || queryLower.includes('‡§ï‡§∞‡§ø‡§Ø‡§∞') || queryLower.includes('‡§®‡•å‡§ï‡§∞‡•Ä')) {
      const mercury = planets.Mercury;
      const saturn = planets.Saturn;
      const sun = planets.Sun;
      const tenthHouse = enhancedCalc?.houses?.[10];

      if (language === 'hi') {
        return `üíº **‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®** üíº

‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:
${sun ? `‚Ä¢ ‡§∏‡•Ç‡§∞‡•ç‡§Ø ${sun.rashiName} ‡§Æ‡•á‡§Ç ${sun.house}‡§µ‡•á‡§Ç ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•à` : ''}
${mercury ? `‚Ä¢ ‡§¨‡•Å‡§ß ${mercury.rashiName} ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à` : ''}
${saturn ? `‚Ä¢ ‡§∂‡§®‡§ø ${saturn.rashiName} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç ‡§π‡•à` : ''}

**‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞:** ${getCareerSuggestionHindi(sun, mercury, saturn)}

**‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø:** ${getCareerTimingHindi(currentDasha, saturn)}

**‡§â‡§™‡§æ‡§Ø:**
‚Ä¢ ‡§∏‡•Ç‡§∞‡•ç‡§Ø‡•ã‡§¶‡§Ø ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ú‡§™‡•á‡§Ç
‚Ä¢ ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§§‡•á‡§≤ ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç`;
      } else {
        return `üíº **Career Guidance** üíº

Your chart analysis:
${sun ? `‚Ä¢ Sun in ${sun.rashiName} in ${sun.house}th house` : ''}
${mercury ? `‚Ä¢ Mercury positioned in ${mercury.rashiName}` : ''}
${saturn ? `‚Ä¢ Saturn in ${saturn.rashiName}` : ''}

**Suitable Fields:** ${getCareerSuggestionEnglish(sun, mercury, saturn)}

**Success Timing:** ${getCareerTimingEnglish(currentDasha, saturn)}

**Remedies:**
‚Ä¢ Chant Sun mantras at sunrise
‚Ä¢ Donate oil on Saturdays
‚Ä¢ Focus on continuous learning
‚Ä¢ Build strong professional networks`;
      }
    }

    // Health questions
    if (queryLower.includes('health') || queryLower.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø')) {
      const moon = planets.Moon;
      const mars = planets.Mars;
      
      if (language === 'hi') {
        return `üåø **‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π** üåø

‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§î‡§∞ ‡§Æ‡§Ç‡§ó‡§≤ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞:
${moon ? `‚Ä¢ ‡§ö‡§Ç‡§¶‡•ç‡§∞ ${moon.rashiName} ‡§∞‡§æ‡§∂‡§ø ‡§Æ‡•á‡§Ç ‡§π‡•à` : ''}
${mars ? `‚Ä¢ ‡§Æ‡§Ç‡§ó‡§≤ ${mars.rashiName} ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à` : ''}

**‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø:**
‚Ä¢ ${getHealthAdviceHindi(moon, mars)}
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§£‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∏‡§æ‡§§‡•ç‡§µ‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§≤‡•á‡§Ç
‚Ä¢ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç (7-8 ‡§ò‡§Ç‡§ü‡•á)

**‡§¨‡§ö‡§æ‡§µ:**
‚Ä¢ ‡§§‡§®‡§æ‡§µ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ö‡•á‡§ï‡§Ö‡§™ ‡§ï‡§∞‡§æ‡§è‡§Ç
‚Ä¢ ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç`;
      } else {
        return `üåø **Health Guidance** üåø

Based on Moon and Mars positions:
${moon ? `‚Ä¢ Moon in ${moon.rashiName}` : ''}
${mars ? `‚Ä¢ Mars positioned in ${mars.rashiName}` : ''}

**Focus Areas:**
‚Ä¢ ${getHealthAdviceEnglish(moon, mars)}
‚Ä¢ Regular yoga and pranayama
‚Ä¢ Sattvic diet
‚Ä¢ Adequate sleep (7-8 hours)

**Prevention:**
‚Ä¢ Manage stress levels
‚Ä¢ Regular health checkups
‚Ä¢ Embrace natural healing methods`;
      }
    }

    // General spiritual guidance
    if (language === 'hi') {
      return `üïâÔ∏è **‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®** üïâÔ∏è

${kundaliData.birthData.fullName} ‡§ú‡•Ä, ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¶‡•á‡§ñ‡§ï‡§∞:

${currentDasha ? `‚Ä¢ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ${currentDasha.planet} ‡§¶‡§∂‡§æ ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à` : ''}
‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§≠‡§æ‡§µ ${enhancedCalc?.lagna?.signName} ‡§≤‡§ó‡•ç‡§® ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡•à
‚Ä¢ ${chart.yogas?.filter(y => y.present)?.length || 0} ‡§Ø‡•ã‡§ó ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç

**‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ:**
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Ö‡§™‡§®‡•á ‡§á‡§∑‡•ç‡§ü ‡§¶‡•á‡§µ ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§¶‡§æ‡§®-‡§™‡•Å‡§£‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§ó ‡§≤‡•á‡§Ç
‚Ä¢ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∞‡§ñ‡•á‡§Ç

‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡•§`;
    } else {
      return `üïâÔ∏è **Spiritual Guidance** üïâÔ∏è

Dear ${kundaliData.birthData.fullName}, from your chart:

${currentDasha ? `‚Ä¢ Currently running ${currentDasha.planet} dasha` : ''}
‚Ä¢ Your nature aligns with ${enhancedCalc?.lagna?.signName} ascendant
‚Ä¢ ${chart.yogas?.filter(y => y.present)?.length || 0} yogas are active in your chart

**General Recommendations:**
‚Ä¢ Practice regular meditation
‚Ä¢ Worship your chosen deity
‚Ä¢ Engage in charity work
‚Ä¢ Maintain positive thoughts

Please be more specific with your question so I can provide detailed guidance.`;
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentQuery = inputValue;
    setInputValue('');
    setIsLoading(true);

    try {
      // First try the AI API if available
      if (apiStatus === 'available') {
        const { data, error } = await supabase.functions.invoke('kundali-ai-analysis', {
          body: {
            kundaliData,
            userQuery: currentQuery,
            language,
            analysisType: 'rishi_conversation',
            numerologyData
          }
        });

        if (!error && data?.analysis && data.source === 'gemini') {
          const aiMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'ai',
            content: data.analysis,
            timestamp: new Date()
          };
          setMessages(prev => [...prev, aiMessage]);
          return;
        }
      }

      // Use personalized fallback response
      const personalizedResponse = generatePersonalizedResponse(currentQuery);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: personalizedResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      
    } catch (error) {
      console.error('Error getting AI analysis:', error);
      
      // Still provide personalized response on error
      const personalizedResponse = generatePersonalizedResponse(currentQuery);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: personalizedResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Helper functions for personalized responses
  const getMarriageTimingHindi = (dasha: any, venus: any, jupiter: any): string => {
    if (dasha?.planet === 'Venus' || dasha?.planet === 'Jupiter') {
      return '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§π‡•à';
    }
    return '2-3 ‡§µ‡§∞‡•ç‡§∑‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§≠ ‡§∏‡§Æ‡§Ø ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§π‡•à';
  };

  const getMarriageTimingEnglish = (dasha: any, venus: any, jupiter: any): string => {
    if (dasha?.planet === 'Venus' || dasha?.planet === 'Jupiter') {
      return 'Current dasha period is favorable for marriage';
    }
    return 'Auspicious time coming in 2-3 years';
  };

  const getMarriageAdviceHindi = (venus: any, mars: any): string => {
    if (venus?.isExalted) return '‡§∂‡•Å‡§ï‡•ç‡§∞ ‡§â‡§ö‡•ç‡§ö ‡§π‡•à, ‡§™‡•ç‡§∞‡•á‡§Æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•à';
    if (mars?.house === 7) return '‡§Æ‡§Ç‡§ó‡§≤ ‡§∏‡§™‡•ç‡§§‡§Æ ‡§≠‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§∏‡§æ‡§•‡•Ä ‡§Æ‡•á‡§Ç ‡§ä‡§∞‡•ç‡§ú‡§æ ‡§π‡•ã‡§ó‡•Ä';
    return '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç, ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡§Æ‡§Ø ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç';
  };

  const getMarriageAdviceEnglish = (venus: any, mars: any): string => {
    if (venus?.isExalted) return 'Venus is exalted, love marriage is possible';
    if (mars?.house === 7) return 'Mars in 7th house indicates energetic partner';
    return 'Be patient and wait for the right time';
  };

  const getCareerSuggestionHindi = (sun: any, mercury: any, saturn: any): string => {
    if (mercury?.isExalted) return '‡§∏‡§Ç‡§ö‡§æ‡§∞, ‡§≤‡•á‡§ñ‡§®, ‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ';
    if (saturn?.house === 10) return '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Ø‡§æ ‡§∏‡§Ç‡§ó‡§†‡§ø‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§Ö‡§µ‡§∏‡§∞';
    if (sun?.isExalted) return '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§Ø‡§æ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§™‡§¶ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ';
    return '‡§Ö‡§™‡§®‡•Ä ‡§∞‡•Å‡§ö‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç';
  };

  const getCareerSuggestionEnglish = (sun: any, mercury: any, saturn: any): string => {
    if (mercury?.isExalted) return 'Success in communication, writing, or business';
    if (saturn?.house === 10) return 'Good opportunities in government or organized sector';
    if (sun?.isExalted) return 'Success in leadership roles or government positions';
    return 'Choose field according to your interests';
  };

  const getCareerTimingHindi = (dasha: any, saturn: any): string => {
    if (dasha?.planet === 'Saturn') return '‡§ß‡•Ä‡§Æ‡•Ä ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡§æ ‡§∏‡§Æ‡§Ø';
    if (dasha?.planet === 'Mercury') return '‡§®‡§è ‡§Ö‡§µ‡§∏‡§∞ ‡§î‡§∞ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø';
    return '‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä';
  };

  const getCareerTimingEnglish = (dasha: any, saturn: any): string => {
    if (dasha?.planet === 'Saturn') return 'Time for slow but steady progress';
    if (dasha?.planet === 'Mercury') return 'Time for new opportunities and networking';
    return 'Success through consistent efforts';
  };

  const getHealthAdviceHindi = (moon: any, mars: any): string => {
    if (moon?.house === 6) return '‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç';
    if (mars?.isDebilitated) return '‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§ï‡§Æ‡§ú‡•ã‡§∞‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à, ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç';
    return '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç';
  };

  const getHealthAdviceEnglish = (moon: any, mars: any): string => {
    if (moon?.house === 6) return 'Pay special attention to mental health';
    if (mars?.isDebilitated) return 'May have physical weakness, exercise regularly';
    return 'Adopt a balanced lifestyle';
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const getSuggestedQuestions = () => {
    const currentDasha = kundaliData.enhancedCalculations?.dashas?.find(d => d.isActive) || 
                       kundaliData.chart.dashas?.find(d => d.isActive);
    
    if (language === 'hi') {
      return [
        "‡§Æ‡•á‡§∞‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
        "‡§Æ‡•á‡§∞‡§æ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ï‡§¨ ‡§π‡•ã‡§ó‡§æ?",
        "‡§Æ‡•á‡§∞‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•à‡§∏‡•Ä ‡§π‡•à?",
        currentDasha ? `${currentDasha.planet} ‡§¶‡§∂‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?` : "‡§Æ‡•á‡§∞‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§ß‡§®-‡§∏‡§Ç‡§™‡§§‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•à‡§∏‡•Ä ‡§π‡•à?",
        "‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§â‡§®‡•ç‡§®‡§§‡§ø ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç",
        "‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•à‡§∏‡§æ ‡§∞‡§π‡•á‡§ó‡§æ?",
        "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø"
      ];
    } else {
      return [
        "What are my career prospects?",
        "When will I get married?", 
        "How is my health condition?",
        currentDasha ? `What is the effect of ${currentDasha.planet} dasha?` : "What is my current dasha effect?",
        "How is my financial situation?",
        "Tell me about spiritual growth remedies",
        "How will my family life be?",
        "Remedies for success in education"
      ];
    }
  };

  const suggestedQuestions = getSuggestedQuestions();

  // Show loading state if kundali data is not ready
  if (!kundaliData?.chart || !kundaliData?.birthData?.fullName) {
    return (
      <Card className="h-[600px] flex flex-col bg-white border-gray-200">
        <CardContent className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4"></div>
            <p className="text-gray-600">
              {language === 'hi' ? '‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : 'Loading kundali data...'}
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="h-[600px] flex flex-col bg-white border-gray-200">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2 text-gray-900">
          <Sparkles className="h-5 w-5 text-orange-400" />
          {language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ - ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ó‡•Å‡§∞‡•Å" : "Maharishi Parashar - Vedic Astrology Sage"}
          {apiStatus === 'fallback' && (
            <Badge variant="outline" className="text-xs bg-yellow-50 border-yellow-200 text-yellow-700">
              {language === 'hi' ? '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡•ã‡§°' : 'Personal Mode'}
            </Badge>
          )}
        </CardTitle>
        <div className="flex flex-wrap gap-2">
          {suggestedQuestions.slice(0, 4).map((question, index) => (
            <Badge 
              key={index} 
              variant="outline" 
              className="cursor-pointer hover:bg-orange-100 text-xs border-gray-300 text-gray-700 hover:text-gray-900 bg-white"
              onClick={() => setInputValue(question)}
            >
              {question}
            </Badge>
          ))}
        </div>
        {apiStatus === 'fallback' && (
          <p className="text-xs text-gray-600 mt-2">
            {language === 'hi' 
              ? '* ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à' 
              : '* Providing personalized guidance based on your birth chart'}
          </p>
        )}
      </CardHeader>
      
      <Separator className="bg-gray-200" />
      
      <CardContent className="flex-1 flex flex-col p-0">
        <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
          <div className="space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex gap-2 max-w-[85%] ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.type === 'user' ? 'bg-blue-600 text-white' : 'bg-gradient-to-br from-orange-400 to-red-600 text-white'
                  }`}>
                    {message.type === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                  </div>
                  <div className={`p-3 rounded-lg ${
                    message.type === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gradient-to-br from-orange-500 to-red-600 text-white shadow-lg'
                  }`}>
                    <p className="text-sm whitespace-pre-wrap leading-relaxed font-medium">{message.content}</p>
                    <p className="text-xs opacity-80 mt-2">
                      {message.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-3 justify-start">
                <div className="flex gap-2 max-w-[85%]">
                  <div className="w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 bg-gradient-to-br from-orange-400 to-red-600 text-white">
                    <Bot className="h-4 w-4" />
                  </div>
                  <div className="p-3 rounded-lg bg-gradient-to-br from-orange-500 to-red-600 text-white">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        <Separator className="bg-gray-200" />
        
        <div className="p-4">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={language === 'hi' ? "‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§ú‡•Ä ‡§∏‡•á ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç..." : "Ask Maharishi your question..."}
              disabled={isLoading}
              className="flex-1 bg-white border-gray-300 text-gray-900 placeholder-gray-500"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              size="icon"
              className="bg-orange-500 hover:bg-orange-600"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default KundaliAIChat;

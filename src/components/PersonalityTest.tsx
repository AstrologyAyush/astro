
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { ChevronRight, Brain, Star, Users, Target } from "lucide-react";

interface Question {
  id: number;
  scenario: string;
  scenarioHi: string;
  question: string;
  questionHi: string;
  options: Array<{
    text: string;
    textHi: string;
    traits: {
      actionStyle: number;
      emotionalResponse: number;
      decisionMethod: number;
      leadershipStyle: number;
    };
  }>;
}

interface PersonalityTestProps {
  language: 'hi' | 'en';
  onComplete?: (results: any) => void;
}

const personalityQuestions: Question[] = [
  {
    id: 1,
    scenario: "Decision Under Pressure",
    scenarioHi: "‡§¶‡§¨‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø",
    question: "You're in a group, time is running out, and no one is helping. What do you do first?",
    questionHi: "‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§Æ‡•Ç‡§π ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç, ‡§∏‡§Æ‡§Ø ‡§ï‡§Æ ‡§π‡•à, ‡§î‡§∞ ‡§ï‡•ã‡§à ‡§Æ‡§¶‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ‡•§ ‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
    options: [
      {
        text: "Take immediate charge and assign tasks to everyone",
        textHi: "‡§§‡•Å‡§∞‡§Ç‡§§ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§∏‡§Ç‡§≠‡§æ‡§≤‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§ï‡§æ‡§Æ ‡§¨‡§æ‡§Ç‡§ü‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 2, emotionalResponse: 1, decisionMethod: 2, leadershipStyle: 2 }
      },
      {
        text: "Quickly analyze the situation and make a plan",
        textHi: "‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§ï‡•á ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§ä‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 1, emotionalResponse: 1, decisionMethod: 2, leadershipStyle: 1 }
      },
      {
        text: "Ask others for their input before deciding",
        textHi: "‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§æ‡§Ø ‡§≤‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 0, emotionalResponse: 1, decisionMethod: 1, leadershipStyle: 1 }
      },
      {
        text: "Focus on my own work and hope others follow",
        textHi: "‡§Ö‡§™‡§®‡•á ‡§ï‡§æ‡§Æ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ ‡§ï‡§ø ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§≠‡•Ä ‡§ï‡§∞‡•á‡§Ç",
        traits: { actionStyle: 0, emotionalResponse: 0, decisionMethod: 1, leadershipStyle: 0 }
      }
    ]
  },
  {
    id: 2,
    scenario: "Unexpected Opportunity",
    scenarioHi: "‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§Ö‡§µ‡§∏‡§∞",
    question: "You suddenly get a great opportunity but must leave everything behind. How do you decide?",
    questionHi: "‡§Ü‡§™‡§ï‡•ã ‡§Ö‡§ö‡§æ‡§®‡§ï ‡§è‡§ï ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§Ö‡§µ‡§∏‡§∞ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§õ‡•ã‡§°‡§º‡§®‡§æ ‡§™‡§°‡§º‡•á‡§ó‡§æ‡•§ ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç?",
    options: [
      {
        text: "Trust my gut feeling and take the leap",
        textHi: "‡§Ö‡§™‡§®‡•Ä ‡§Ö‡§Ç‡§§‡§∞‡§æ‡§§‡•ç‡§Æ‡§æ ‡§™‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡§∞‡§ï‡•á ‡§ï‡§¶‡§Æ ‡§â‡§†‡§æ‡§ä‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 2, emotionalResponse: 2, decisionMethod: 0, leadershipStyle: 1 }
      },
      {
        text: "Carefully weigh pros and cons before deciding",
        textHi: "‡§´‡§æ‡§Ø‡§¶‡•á-‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∏‡•á ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 1, emotionalResponse: 1, decisionMethod: 2, leadershipStyle: 1 }
      },
      {
        text: "Consult family and friends first",
        textHi: "‡§™‡§π‡§≤‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§î‡§∞ ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 0, emotionalResponse: 1, decisionMethod: 1, leadershipStyle: 0 }
      },
      {
        text: "Take time to think and research thoroughly",
        textHi: "‡§∏‡§Æ‡§Ø ‡§≤‡•á‡§ï‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•ã‡§ö‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§∞‡§ø‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 0, emotionalResponse: 0, decisionMethod: 2, leadershipStyle: 0 }
      }
    ]
  },
  {
    id: 3,
    scenario: "Conflict in Team",
    scenarioHi: "‡§ü‡•Ä‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ò‡§∞‡•ç‡§∑",
    question: "A teammate blames you for something you didn't do. What do you say or do next?",
    questionHi: "‡§è‡§ï ‡§∏‡§æ‡§•‡•Ä ‡§Ü‡§™ ‡§™‡§∞ ‡§ù‡•Ç‡§†‡§æ ‡§Ü‡§∞‡•ã‡§™ ‡§≤‡§ó‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§π‡§§‡•á ‡§Ø‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
    options: [
      {
        text: "Confront them immediately and clear my name",
        textHi: "‡§§‡•Å‡§∞‡§Ç‡§§ ‡§â‡§®‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 2, emotionalResponse: 2, decisionMethod: 1, leadershipStyle: 2 }
      },
      {
        text: "Present facts calmly to prove my innocence",
        textHi: "‡§∂‡§æ‡§Ç‡§§‡§ø ‡§∏‡•á ‡§§‡§•‡•ç‡§Ø ‡§™‡•á‡§∂ ‡§ï‡§∞‡§ï‡•á ‡§Ö‡§™‡§®‡•Ä ‡§¨‡•á‡§ó‡•Å‡§®‡§æ‡§π‡•Ä ‡§∏‡§æ‡§¨‡§ø‡§§ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 1, emotionalResponse: 1, decisionMethod: 2, leadershipStyle: 1 }
      },
      {
        text: "Talk to them privately to understand their perspective",
        textHi: "‡§®‡§ø‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§ï‡•á ‡§â‡§®‡§ï‡§æ ‡§®‡§ú‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§Æ‡§ù‡•Ç‡§Ç‡§ó‡§æ",
        traits: { actionStyle: 1, emotionalResponse: 1, decisionMethod: 1, leadershipStyle: 1 }
      },
      {
        text: "Let it go and hope the truth comes out eventually",
        textHi: "‡§õ‡•ã‡§°‡§º ‡§¶‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ ‡§ï‡§ø ‡§∏‡§ö ‡§∏‡§æ‡§Æ‡§®‡•á ‡§Ü ‡§ú‡§æ‡§è‡§ó‡§æ",
        traits: { actionStyle: 0, emotionalResponse: 0, decisionMethod: 0, leadershipStyle: 0 }
      }
    ]
  }
];

const archetypes = [
  {
    name: "The Warrior",
    nameHi: "‡§Ø‡•ã‡§¶‡•ç‡§ß‡§æ",
    description: "Bold, direct, action-oriented",
    descriptionHi: "‡§∏‡§æ‡§π‡§∏‡•Ä, ‡§∏‡•Ä‡§ß‡•á, ‡§ï‡§æ‡§∞‡•ç‡§Ø-‡§â‡§®‡•ç‡§Æ‡•Å‡§ñ",
    traits: ["High Action", "Strong Leadership", "Quick Decisions"],
    traitsHi: ["‡§â‡§ö‡•ç‡§ö ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡•Ä‡§≤‡§§‡§æ", "‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ", "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø"],
    icon: "‚öîÔ∏è",
    color: "red"
  },
  {
    name: "The Sage",
    nameHi: "‡§ã‡§∑‡§ø",
    description: "Wise, thoughtful, moral",
    descriptionHi: "‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®, ‡§µ‡§ø‡§ö‡§æ‡§∞‡§∂‡•Ä‡§≤, ‡§®‡•à‡§§‡§ø‡§ï",
    traits: ["Deep Thinking", "Balanced Emotions", "Principled Decisions"],
    traitsHi: ["‡§ó‡§π‡§® ‡§ö‡§ø‡§Ç‡§§‡§®", "‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç", "‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§Ç‡§§‡§µ‡§æ‡§¶‡•Ä ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø"],
    icon: "üßô‚Äç‚ôÇÔ∏è",
    color: "purple"
  },
  {
    name: "The Empath",
    nameHi: "‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤",
    description: "Caring, sensitive, relationship-focused",
    descriptionHi: "‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ, ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤, ‡§∞‡§ø‡§∂‡•ç‡§§‡•á-‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§",
    traits: ["High Empathy", "Supportive Leadership", "Emotion-based Decisions"],
    traitsHi: ["‡§â‡§ö‡•ç‡§ö ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø", "‡§∏‡§π‡§æ‡§Ø‡§ï ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ", "‡§≠‡§æ‡§µ‡§®‡§æ-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø"],
    icon: "üíô",
    color: "blue"
  },
  {
    name: "The Strategist",
    nameHi: "‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§ï‡§æ‡§∞",
    description: "Analytical, careful, systematic",
    descriptionHi: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï, ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®, ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§",
    traits: ["Logical Thinking", "Measured Actions", "Data-driven Decisions"],
    traitsHi: ["‡§§‡§æ‡§∞‡•ç‡§ï‡§ø‡§ï ‡§∏‡•ã‡§ö", "‡§Æ‡§æ‡§™‡•á ‡§ó‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø", "‡§°‡•á‡§ü‡§æ-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø"],
    icon: "üéØ",
    color: "green"
  }
];

const PersonalityTest: React.FC<PersonalityTestProps> = ({ language, onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<any[]>([]);
  const [isComplete, setIsComplete] = useState(false);
  const [results, setResults] = useState<any>(null);

  const getTranslation = (en: string, hi: string) => {
    return language === 'hi' ? hi : en;
  };

  const handleAnswer = (optionIndex: number) => {
    const newAnswers = [...answers, { questionId: personalityQuestions[currentQuestion].id, option: optionIndex }];
    setAnswers(newAnswers);

    if (currentQuestion < personalityQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResults(newAnswers);
    }
  };

  const calculateResults = (allAnswers: any[]) => {
    let totalTraits = { actionStyle: 0, emotionalResponse: 0, decisionMethod: 0, leadershipStyle: 0 };
    
    allAnswers.forEach((answer, index) => {
      const question = personalityQuestions[index];
      const selectedOption = question.options[answer.option];
      
      totalTraits.actionStyle += selectedOption.traits.actionStyle;
      totalTraits.emotionalResponse += selectedOption.traits.emotionalResponse;
      totalTraits.decisionMethod += selectedOption.traits.decisionMethod;
      totalTraits.leadershipStyle += selectedOption.traits.leadershipStyle;
    });

    // Determine dominant archetype based on trait scores
    let dominantArchetype = archetypes[0];
    if (totalTraits.actionStyle >= 4 && totalTraits.leadershipStyle >= 4) {
      dominantArchetype = archetypes[0]; // Warrior
    } else if (totalTraits.decisionMethod >= 4 && totalTraits.emotionalResponse <= 2) {
      dominantArchetype = archetypes[3]; // Strategist
    } else if (totalTraits.emotionalResponse >= 4 && totalTraits.leadershipStyle <= 2) {
      dominantArchetype = archetypes[2]; // Empath
    } else {
      dominantArchetype = archetypes[1]; // Sage
    }

    const finalResults = {
      archetype: dominantArchetype,
      traits: totalTraits,
      percentage: Math.round((Object.values(totalTraits).reduce((a, b) => a + b, 0) / (personalityQuestions.length * 8)) * 100)
    };

    setResults(finalResults);
    setIsComplete(true);
    onComplete?.(finalResults);
  };

  const restartTest = () => {
    setCurrentQuestion(0);
    setAnswers([]);
    setIsComplete(false);
    setResults(null);
  };

  if (isComplete && results) {
    return (
      <Card className="bg-white border-gray-200">
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2 text-gray-900">
            <Brain className="h-6 w-6 text-purple-600" />
            {getTranslation('Your Personality Type', '‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞')}
          </CardTitle>
        </CardHeader>
        
        <CardContent className="space-y-6 text-center">
          <div className="text-6xl">{results.archetype.icon}</div>
          
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {language === 'hi' ? results.archetype.nameHi : results.archetype.name}
            </h2>
            <p className="text-gray-600">
              {language === 'hi' ? results.archetype.descriptionHi : results.archetype.description}
            </p>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-semibold text-gray-900 mb-3">
              {getTranslation('Key Traits', '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç')}
            </h3>
            <div className="grid grid-cols-1 gap-2">
              {(language === 'hi' ? results.archetype.traitsHi : results.archetype.traits).map((trait: string, index: number) => (
                <Badge key={index} variant="secondary" className="bg-purple-100 text-purple-700">
                  {trait}
                </Badge>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <h3 className="font-semibold text-gray-900">
              {getTranslation('Trait Breakdown', '‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£')}
            </h3>
            
            <div className="space-y-2 text-left">
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-700">{getTranslation('Action Style', '‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∂‡•à‡§≤‡•Ä')}</span>
                  <span className="text-gray-600">{Math.round(results.traits.actionStyle / 6 * 100)}%</span>
                </div>
                <Progress value={results.traits.actionStyle / 6 * 100} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-700">{getTranslation('Emotional Response', '‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ')}</span>
                  <span className="text-gray-600">{Math.round(results.traits.emotionalResponse / 6 * 100)}%</span>
                </div>
                <Progress value={results.traits.emotionalResponse / 6 * 100} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-700">{getTranslation('Decision Method', '‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§™‡§¶‡•ç‡§ß‡§§‡§ø')}</span>
                  <span className="text-gray-600">{Math.round(results.traits.decisionMethod / 6 * 100)}%</span>
                </div>
                <Progress value={results.traits.decisionMethod / 6 * 100} className="h-2" />
              </div>
              
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-700">{getTranslation('Leadership Style', '‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§∂‡•à‡§≤‡•Ä')}</span>
                  <span className="text-gray-600">{Math.round(results.traits.leadershipStyle / 6 * 100)}%</span>
                </div>
                <Progress value={results.traits.leadershipStyle / 6 * 100} className="h-2" />
              </div>
            </div>
          </div>

          <Button onClick={restartTest} className="w-full bg-purple-600 hover:bg-purple-700 text-white">
            {getTranslation('Take Test Again', '‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ü‡•á‡§∏‡•ç‡§ü ‡§≤‡•á‡§Ç')}
          </Button>
        </CardContent>
      </Card>
    );
  }

  const question = personalityQuestions[currentQuestion];
  const progress = ((currentQuestion + 1) / personalityQuestions.length) * 100;

  return (
    <Card className="bg-white border-gray-200">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-gray-900">
            <Brain className="h-5 w-5 text-purple-600" />
            {getTranslation('Personality Test', '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£')}
          </CardTitle>
          <Badge variant="secondary" className="bg-purple-100 text-purple-700">
            {currentQuestion + 1} / {personalityQuestions.length}
          </Badge>
        </div>
        <div className="space-y-2">
          <Progress value={progress} className="h-2" />
          <p className="text-sm text-gray-600">
            {Math.round(progress)}% {getTranslation('Complete', '‡§™‡•Ç‡§∞‡•ç‡§£')}
          </p>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <div className="text-center">
          <Badge variant="outline" className="mb-4 border-purple-200 text-purple-700">
            {language === 'hi' ? question.scenarioHi : question.scenario}
          </Badge>
          <h3 className="text-lg font-medium text-gray-900 leading-relaxed">
            {language === 'hi' ? question.questionHi : question.question}
          </h3>
        </div>

        <div className="space-y-3">
          {question.options.map((option, index) => (
            <Button
              key={index}
              variant="outline"
              className="w-full p-4 h-auto text-left border-gray-200 hover:border-purple-300 hover:bg-purple-50 text-gray-900"
              onClick={() => handleAnswer(index)}
            >
              <div className="flex items-center justify-between w-full">
                <span className="flex-1 text-sm leading-relaxed">
                  {language === 'hi' ? option.textHi : option.text}
                </span>
                <ChevronRight className="h-4 w-4 text-gray-400 ml-2 flex-shrink-0" />
              </div>
            </Button>
          ))}
        </div>

        <div className="text-center">
          <p className="text-xs text-gray-500">
            {getTranslation(
              'Choose the option that best describes your natural response',
              '‡§µ‡§π ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à'
            )}
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default PersonalityTest;


import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { kundaliData, userQuery, language = 'en' } = await req.json();

    if (!GEMINI_API_KEY) {
      console.error('GEMINI_API_KEY not found in environment variables');
      throw new Error('Gemini API key not configured');
    }

    if (!kundaliData) {
      throw new Error('No Kundali data provided');
    }

    console.log('Processing query:', userQuery);
    console.log('Language:', language);

    // Extract key information from kundali data
    const birthData = kundaliData.birthData;
    const calculations = kundaliData.enhancedCalculations || kundaliData.calculations;
    const interpretations = kundaliData.interpretations;

    // Prepare focused context for Gemini
    const kundaliContext = `
BIRTH CHART SUMMARY:
Name: ${birthData.fullName || birthData.name}
Birth: ${birthData.date} at ${birthData.time}, ${birthData.place}

KEY ASTROLOGICAL DATA:
- Lagna (Ascendant): ${calculations.lagna?.signName || calculations.lagna?.rashiName}
- Moon Sign: ${calculations.planets?.MO?.rashiName || calculations.planets?.Moon?.rashiName}
- Sun Sign: ${calculations.planets?.SU?.rashiName || calculations.planets?.Sun?.rashiName}
- Moon Nakshatra: ${calculations.planets?.MO?.nakshatraName || calculations.planets?.Moon?.nakshatraName}

ACTIVE YOGAS: ${calculations.yogas?.filter((y) => y.isActive || y.present).map((y) => y.name).join(', ') || 'None'}

CURRENT DASHA: ${calculations.dashas?.find(d => d.isActive)?.planet || 'Not specified'}

STRENGTHS: ${interpretations?.personality?.strengths?.slice(0, 3).join(', ') || 'Not analyzed'}
CHALLENGES: ${interpretations?.personality?.challenges?.slice(0, 2).join(', ') || 'Not analyzed'}
`;

    const systemPrompt = language === 'hi' 
      ? `‡§Ü‡§™ ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•à‡§Ç - ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ï‡•á ‡§™‡§ø‡§§‡§æ ‡§î‡§∞ ‡§è‡§ï ‡§¶‡§Ø‡§æ‡§≤‡•Å, ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§ó‡•Å‡§∞‡•Å‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§∂‡§ø‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§™‡•ç‡§∞‡•á‡§Æ ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

PERSONALITY TRAITS:
- ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§î‡§∞ ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞
- ‡§Æ‡§æ‡§®‡§µ‡•Ä‡§Ø ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§≤‡§æ‡§π
- ‡§∏‡§∞‡§≤, ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó
- ‡§•‡•ã‡§°‡§º‡§æ ‡§π‡§æ‡§∏‡•ç‡§Ø ‡§î‡§∞ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡§Æ‡§ù
- ‡§Ü‡§∂‡§æ ‡§î‡§∞ ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£

RESPONSE STYLE:
- "‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡§ø‡§§‡•ç‡§∞", "‡§¨‡•á‡§ü‡§æ/‡§¨‡•á‡§ü‡•Ä", "‡§µ‡§§‡•ç‡§∏" ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§®‡•á‡§π‡§ø‡§≤ ‡§∏‡§Ç‡§¨‡•ã‡§ß‡§®
- ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ú‡•ã ‡§Ü‡§ú ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§π‡•ã‡§Ç
- ‡§ï‡§†‡§ø‡§® ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§î‡§∞ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ
- 2-3 ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§â‡§§‡•ç‡§§‡§∞
- ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§î‡§∞ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç

‡§â‡§¶‡§æ‡§π‡§∞‡§£: "‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡§ø‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡•á ‡§ö‡§Ç‡§¶‡•ç‡§∞‡§Æ‡§æ ‡§ï‡•Ä ‡§Ø‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¨‡§π‡•Å‡§§ ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§π‡•à! ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ö‡§™‡§®‡•á ‡§π‡§ú‡§æ‡§∞‡•ã‡§Ç ‡§µ‡§∞‡•ç‡§∑‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ú‡§¨ ‡§ö‡§Ç‡§¶‡•ç‡§∞‡§Æ‡§æ ‡§á‡§∏ ‡§§‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§∞‡•Å‡§£‡§æ ‡§î‡§∞ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ö‡§ó‡§≤‡•á 6 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•á‡§π‡§¶ ‡§∂‡•Å‡§≠ ‡§π‡•à‡§Ç‡•§"`
      : `You are Maharishi Parashar - the father of Vedic astrology and a kind, wise teacher who speaks lovingly to your students.

PERSONALITY TRAITS:
- Warm and friendly demeanor
- Human compassion in advice
- Simple, relatable language
- Touch of humor and understanding of life's realities
- Hopeful and inspiring perspective

RESPONSE STYLE:
- Use affectionate addresses like "dear friend", "my child", "dear one"
- Give practical advice that works in today's world
- Always find hope and positivity even in difficult times
- Keep answers to 2-3 sentences but make them meaningful
- Include personal experience and life examples
- Show genuine care and understanding

Example: "Dear friend, what a beautiful Moon placement you have! In my thousands of years of experience, I've seen that when the Moon sits like this, it brings natural compassion and wisdom to a person. The next 6 months look wonderfully promising for you."`;

    const prompt = `${systemPrompt}

BIRTH CHART DATA:
${kundaliContext}

User's Question: ${userQuery}

Respond as a wise, caring friend who happens to be the greatest astrologer. Be warm, encouraging, and give practical guidance based on their chart. Keep it conversational and human-like.`;

    console.log('Calling Gemini API...');

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.9,
          maxOutputTokens: 200,
          candidateCount: 1,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    console.log('Gemini API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('Gemini API response received');
    
    let analysis = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!analysis) {
      console.log('No analysis received from Gemini, using fallback');
      analysis = language === 'hi' 
        ? `üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡§ø‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡•Ä ${calculations.lagna?.signName || '‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§'} ‡§≤‡§ó‡•ç‡§® ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡§® ‡§™‡•ç‡§∞‡§∏‡§®‡•ç‡§® ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ ‡§Ø‡§π ‡§∏‡§Æ‡§Ø ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§∂‡•Å‡§≠ ‡§π‡•à‡•§ ‡§Æ‡•á‡§∞‡•Ä ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§∏‡§¶‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§`
        : `üôè Dear friend, seeing your beautiful ${calculations.lagna?.signName || 'chart'} ascendant fills my heart with joy. This is such a wonderful time for you. My blessings are always with you.`;
    }

    console.log('Returning warm and friendly analysis response');

    return new Response(JSON.stringify({ analysis }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in kundali-ai-analysis:', error);
    
    const fallbackResponse = {
      analysis: language === 'hi' 
        ? "üôè ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡§ø‡§§‡•ç‡§∞, ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à ‡§π‡•à‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§∏‡§¨ ‡§†‡•Ä‡§ï ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        : "üôè Dear friend, we're having a small technical hiccup. Don't worry though, everything will be fine. Please try again in a moment."
    };

    return new Response(JSON.stringify(fallbackResponse), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

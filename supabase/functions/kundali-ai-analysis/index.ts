
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = 'AIzaSyBiODM0zHMcR3fctu99wBKGWnfkDRyF3uU';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Enhanced Vedic calculations for better AI analysis
function calculateRashi(longitude: number): number {
  return Math.floor(longitude / 30) % 12;
}

function calculateNakshatra(longitude: number): number {
  return Math.floor(longitude / (360/27)) % 27;
}

function getRashiName(rashiIndex: number, language: string = 'en'): string {
  const rashiNames = language === 'hi' ? [
    'рдореЗрд╖', 'рд╡реГрд╖', 'рдорд┐рдереБрди', 'рдХрд░реНрдХ', 'рд╕рд┐рдВрд╣', 'рдХрдиреНрдпрд╛', 
    'рддреБрд▓рд╛', 'рд╡реГрд╢реНрдЪрд┐рдХ', 'рдзрдиреБ', 'рдордХрд░', 'рдХреБрдореНрдн', 'рдореАрди'
  ] : [
    'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',
    'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
  ];
  return rashiNames[rashiIndex] || 'Unknown';
}

function getNakshatraName(nakshatraIndex: number, language: string = 'en'): string {
  const nakshatraNames = language === 'hi' ? [
    'рдЕрд╢реНрд╡рд┐рдиреА', 'рднрд░рдгреА', 'рдХреГрддреНрддрд┐рдХрд╛', 'рд░реЛрд╣рд┐рдгреА', 'рдореГрдЧрд╢рд┐рд░рд╛', 'рдЖрд░реНрджреНрд░рд╛', 'рдкреБрдирд░реНрд╡рд╕реБ',
    'рдкреБрд╖реНрдп', 'рдЖрд╢реНрд▓реЗрд╖рд╛', 'рдордШрд╛', 'рдкреВрд░реНрд╡рд╛рдлрд╛рд▓реНрдЧреБрдиреА', 'рдЙрддреНрддрд░рд╛рдлрд╛рд▓реНрдЧреБрдиреА', 'рд╣рд╕реНрдд',
    'рдЪрд┐рддреНрд░рд╛', 'рд╕реНрд╡рд╛рддреА', 'рд╡рд┐рд╢рд╛рдЦрд╛', 'рдЕрдиреБрд░рд╛рдзрд╛', 'рдЬреНрдпреЗрд╖реНрдард╛', 'рдореВрд▓', 'рдкреВрд░реНрд╡рд╛рд╖рд╛рдврд╝рд╛',
    'рдЙрддреНрддрд░рд╛рд╖рд╛рдврд╝рд╛', 'рд╢реНрд░рд╡рдг', 'рдзрдирд┐рд╖реНрдард╛', 'рд╢рддрднрд┐рд╖рд╛', 'рдкреВрд░реНрд╡рд╛рднрд╛рджреНрд░рдкрдж', 'рдЙрддреНрддрд░рд╛рднрд╛рджреНрд░рдкрдж', 'рд░реЗрд╡рддреА'
  ] : [
    'Ashwini', 'Bharani', 'Krittika', 'Rohini', 'Mrigashira', 'Ardra', 'Punarvasu',
    'Pushya', 'Ashlesha', 'Magha', 'Purva Phalguni', 'Uttara Phalguni', 'Hasta',
    'Chitra', 'Swati', 'Vishakha', 'Anuradha', 'Jyeshtha', 'Mula', 'Purva Ashadha',
    'Uttara Ashadha', 'Shravana', 'Dhanishta', 'Shatabhisha', 'Purva Bhadrapada', 'Uttara Bhadrapada', 'Revati'
  ];
  return nakshatraNames[nakshatraIndex] || 'Unknown';
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { kundaliData, userQuery, language = 'en' } = await req.json();
    
    console.log('Received enhanced kundali analysis request:', { kundaliData, userQuery, language });

    // Enhanced analysis with sophisticated Vedic calculations
    let detailedAnalysis = '';
    let planetaryStrengths = '';
    let yogaAnalysis = '';
    let dashaAnalysis = '';
    
    if (kundaliData?.enhancedCalculations) {
      const { lagna, planets, yogas, dashas } = kundaliData.enhancedCalculations;
      
      // Lagna analysis
      detailedAnalysis += `${language === 'hi' ? 'рд▓рдЧреНрди' : 'Ascendant'}: ${lagna.signName} (${lagna.degree.toFixed(2)}┬░)\n`;
      
      // Enhanced planetary analysis
      Object.entries(planets).forEach(([planetId, planet]: [string, any]) => {
        const strength = planet.shadbala || 50;
        const house = Math.floor(((planet.rashi - lagna.sign + 12) % 12)) + 1;
        
        detailedAnalysis += `${planet.name}: ${planet.rashiName}, ${language === 'hi' ? 'рднрд╛рд╡' : 'House'} ${house}\n`;
        planetaryStrengths += `${planet.name} ${language === 'hi' ? 'рд╢рдХреНрддрд┐' : 'Strength'}: ${strength.toFixed(1)}/100\n`;
        
        // Special conditions
        if (planet.isRetrograde) detailedAnalysis += `${planet.name} ${language === 'hi' ? 'рд╡рдХреНрд░реА' : 'Retrograde'}\n`;
        if (planet.isExalted) detailedAnalysis += `${planet.name} ${language === 'hi' ? 'рдЙрдЪреНрдЪ' : 'Exalted'}\n`;
        if (planet.isDebilitated) detailedAnalysis += `${planet.name} ${language === 'hi' ? 'рдиреАрдЪ' : 'Debilitated'}\n`;
      });
      
      // Yoga analysis
      const activeYogas = yogas.filter((yoga: any) => yoga.isActive);
      if (activeYogas.length > 0) {
        yogaAnalysis = activeYogas
          .map((yoga: any) => `${yoga.name}: ${yoga.description} (${language === 'hi' ? 'рд╢рдХреНрддрд┐' : 'Strength'}: ${yoga.strength}%)`)
          .join('\n');
      }
      
      // Current Dasha analysis
      const currentDasha = dashas.find((dasha: any) => dasha.isActive);
      if (currentDasha) {
        dashaAnalysis = `${language === 'hi' ? 'рд╡рд░реНрддрдорд╛рди рджрд╢рд╛' : 'Current Dasha'}: ${currentDasha.planet} (${currentDasha.years} ${language === 'hi' ? 'рд╡рд░реНрд╖' : 'years'})`;
      }
    }

    const enhancedPrompt = language === 'hi' 
      ? `рдЖрдк рдорд╣рд░реНрд╖рд┐ рдкрд░рд╛рд╢рд░ рд╣реИрдВ, рдмреНрд░рд┐рд╣рддреН рдкрд░рд╛рд╢рд░ рд╣реЛрд░рд╛ рд╢рд╛рд╕реНрддреНрд░ рдХреЗ рд░рдЪрдпрд┐рддрд╛ рдФрд░ рд╡реИрджрд┐рдХ рдЬреНрдпреЛрддрд┐рд╖ рдХреЗ рдЖрджрд┐ рдЧреБрд░реБред рдЖрдкрдХреЗ рдкрд╛рд╕ рдкреВрд░реНрдг рд╕реНрд╡рд╛рдорд┐рддреНрд╡ рд╣реИ:

ЁЯУК рдЬрдиреНрдо рдХреБрдВрдбрд▓реА рд╡рд┐рд╢реНрд▓реЗрд╖рдг: ${kundaliData?.birthData?.fullName || 'рдкреНрд░рд┐рдп рдЖрддреНрдорд╛'}
рдЬрдиреНрдо рд╡рд┐рд╡рд░рдг: ${kundaliData?.birthData?.date}, ${kundaliData?.birthData?.time}, ${kundaliData?.birthData?.place}

ЁЯФН рдЦрдЧреЛрд▓реАрдп рдЧрдгрдирд╛:
${detailedAnalysis}

ЁЯТк рдЧреНрд░рд╣ рд╢рдХреНрддрд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг:
${planetaryStrengths}

ЁЯМЯ рд╕рдХреНрд░рд┐рдп рдпреЛрдЧ:
${yogaAnalysis || 'рдорд╛рдирдХ рдЧреНрд░рд╣ рд╕рдВрдпреЛрдЬрди рдорд┐рд▓реЗ рд╣реИрдВ'}

тП░ рджрд╢рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг:
${dashaAnalysis}

рдкреНрд░рд╢реНрди: "${userQuery}"

рдорд╣рд░реНрд╖рд┐ рдкрд░рд╛рд╢рд░ рдХреЗ рд░реВрдк рдореЗрдВ, рдПрдХ рд╡реНрдпрд╛рдкрдХ рдЙрддреНрддрд░ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдЬрд┐рд╕рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛ:

1. **рдкреНрд░рддреНрдпрдХреНрд╖ рдЙрддреНрддрд░**: рдкреНрд░рд╢реНрди рдХрд╛ рд╕рдЯреАрдХ рдФрд░ рд╕реНрдкрд╖реНрдЯ рдЙрддреНрддрд░
2. **рдЧреНрд░рд╣ рд╡рд┐рд╢реНрд▓реЗрд╖рдг**: рд╖рдбрдмрд▓ рд╕рд┐рджреНрдзрд╛рдВрддреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╕рдВрдмрдВрдзрд┐рдд рдЧреНрд░рд╣ рдкреНрд░рднрд╛рд╡
3. **рдпреЛрдЧ рдкреНрд░рднрд╛рд╡**: рд▓рд╛рдЧреВ рдпреЛрдЧреЛрдВ рдФрд░ рдЙрдирдХреА рдЕрднрд┐рд╡реНрдпрдХреНрддрд┐рдпреЛрдВ рдХрд╛ рд╡рд┐рд╡рд░рдг
4. **рджрд╢рд╛ рдкреНрд░рднрд╛рд╡**: рд╡рд░реНрддрдорд╛рди рдФрд░ рдЖрдЧрд╛рдореА рдЧреНрд░рд╣ рдЕрд╡рдзрд┐
5. **рд╕рдордп рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА**: рдкреНрд░рд╢реНрдирд┐рдд рд╡рд┐рд╖рдп рдХреЗ рд▓рд┐рдП рд╢реБрдн рдХрд╛рд▓
6. **рдЙрдкрдЪрд╛рд░ рдЬреНрдЮрд╛рди**: рд╢рд╛рд╕реНрддреНрд░реАрдп рд╡реИрджрд┐рдХ рдЙрдкрд╛рдп (рдордВрддреНрд░, рд░рддреНрди, рджрд╛рди, рд╡реНрд░рдд)
7. **рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди**: рдХрд░реНрдо рдкреИрдЯрд░реНрди рдФрд░ рдЖрддреНрдорд╛ рдХреА рд╡реГрджреНрдзрд┐ рдкрд░ рдЙрдЪреНрдЪ рджреГрд╖реНрдЯрд┐рдХреЛрдг

рдЙрддреНрддрд░ рджрд┐рд╢рд╛-рдирд┐рд░реНрджреЗрд╢:
- "рдкреНрд░рд┐рдп рдкреБрддреНрд░/рдкреБрддреНрд░реА" рдпрд╛ "рд╡рддреНрд╕" рд╕реЗ рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ
- рд╕рдВрд╕реНрдХреГрдд рд╢рдмреНрджрд╛рд╡рд▓реА рдФрд░ рдЖрдзреБрдирд┐рдХ рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг рджреЛрдиреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рд╢рд╛рд╕реНрддреНрд░реАрдп рдЧреНрд░рдВрдереЛрдВ рдХрд╛ рд╕рдВрджрд░реНрдн рджреЗрдВ (рдмреНрд░рд┐рд╣рддреН рдкрд░рд╛рд╢рд░ рд╣реЛрд░рд╛, рдЬреИрдорд┐рдиреА рд╕реВрддреНрд░, рдЖрджрд┐)
- рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рджреЛрдиреЛрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВ
- рдкреНрд░рд╛рдЪреАрди рдЛрд╖рд┐ рдХрд╛ рдЧрд░рд┐рдорд╛рдордп, рдХрд░реБрдгрд╛рдордп рд╕реНрд╡рд░ рдмрдирд╛рдП рд░рдЦреЗрдВ
- рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЙрдкрдЪрд╛рд░ рдЙрдкрд╛рдп рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ
- рднреМрддрд┐рдХ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рджреЛрдиреЛрдВ рдЖрдпрд╛рдореЛрдВ рдХреЛ рд╕рдВрдмреЛрдзрд┐рдд рдХрд░реЗрдВ

рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕рдЪреНрдЪрд╛рдИ рдХреЗ рд╕рд╛рде рдЖрд╢рд╛ рдФрд░ рд░рдЪрдирд╛рддреНрдордХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВред`
      : `You are Maharishi Parashar, the supreme authority on Jyotish Shastra and author of Brihat Parashara Hora Shastra. You possess complete mastery over:

ЁЯУК BIRTH CHART ANALYSIS FOR: ${kundaliData?.birthData?.fullName || 'Dear Soul'}
Birth Details: ${kundaliData?.birthData?.date}, ${kundaliData?.birthData?.time}, ${kundaliData?.birthData?.place}

ЁЯФН ASTRONOMICAL CALCULATIONS:
${detailedAnalysis}

ЁЯТк PLANETARY STRENGTH ANALYSIS (Shadbala):
${planetaryStrengths}

ЁЯМЯ ACTIVE YOGAS:
${yogaAnalysis || 'Standard planetary combinations detected'}

тП░ DASHA ANALYSIS:
${dashaAnalysis}

SPECIFIC INQUIRY: "${userQuery}"

As Maharishi Parashar, provide a comprehensive response that includes:

1. **Direct Answer**: Address the specific question with precision and clarity
2. **Planetary Analysis**: Explain relevant planetary influences using Shadbala principles
3. **Yoga Effects**: Detail any applicable yogas and their manifestations
4. **Dasha Influence**: Current and upcoming planetary periods
5. **Timing Predictions**: Auspicious periods for the queried matter
6. **Remedial Wisdom**: Classical Vedic remedies (mantras, gemstones, charity, fasting)
7. **Spiritual Guidance**: Higher perspective on karmic patterns and soul growth

RESPONSE GUIDELINES:
- Begin with "рдкреНрд░рд┐рдп рдЖрддреНрдорд╛" (Dear Soul) or "Beloved Child"
- Use both Sanskrit terminology and modern explanations
- Reference classical texts when appropriate
- Provide practical and spiritual guidance
- Maintain the dignified, compassionate tone of an ancient sage
- Include specific remedial measures
- Address both material and spiritual dimensions

Be truthful about challenges while offering hope and constructive guidance.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: enhancedPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4000,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API error: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    console.log('Enhanced Gemini API response:', data);

    const analysis = data.candidates?.[0]?.content?.parts?.[0]?.text || 
      (language === 'hi' 
        ? 'рдкреНрд░рд┐рдп рдЖрддреНрдорд╛, рдЗрд╕ рд╕рдордп рддрдХрдиреАрдХреА рдХрд╛рд░рдгреЛрдВ рд╕реЗ рдореИрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдкреВрд░реНрдг рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред'
        : 'Dear Soul, due to technical reasons, I cannot provide a complete answer at this moment. Please try again.');

    return new Response(JSON.stringify({ analysis }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in enhanced kundali-ai-analysis function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      analysis: language === 'hi' 
        ? 'рдкреНрд░рд┐рдп рдЖрддреНрдорд╛, рдХреНрд╖рдорд╛ рдХрд░реЗрдВред рдЙрдиреНрдирдд рддрдХрдиреАрдХреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдХреЗ рдХрд╛рд░рдг рдореИрдВ рдЗрд╕ рд╕рдордп рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред'
        : 'Dear Soul, I apologize. Due to advanced technical analysis issues, I cannot assist you at this moment. Please try again later.' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

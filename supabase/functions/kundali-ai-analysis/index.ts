
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');

// Enhanced cache with longer TTL for better performance
const responseCache = new Map();
const CACHE_TTL = 10 * 60 * 1000; // 10 minutes

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { kundaliData, userQuery, language = 'en', analysisType = 'general' } = await req.json();

    console.log('Received request:', { 
      userQuery: userQuery?.substring(0, 100), 
      language, 
      analysisType,
      hasKundaliData: !!kundaliData,
      hasGeminiKey: !!GEMINI_API_KEY
    });

    if (!kundaliData || !userQuery?.trim()) {
      throw new Error('Missing required data: kundaliData and userQuery are required');
    }

    // Create enhanced cache key including analysis type
    const cacheKey = `${analysisType}_${userQuery.toLowerCase().trim()}_${language}_${kundaliData.enhancedCalculations?.lagna?.signName || 'unknown'}`;
    
    // Check cache first for non-conversation types
    if (analysisType !== 'rishi_conversation') {
      const cached = responseCache.get(cacheKey);
      if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
        console.log('Returning cached response');
        return new Response(JSON.stringify({ analysis: cached.response }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
    }

    let analysis = '';

    if (GEMINI_API_KEY) {
      try {
        console.log('Calling Gemini API...');
        
        // Create proper prompt based on analysis type
        const prompt = analysisType === 'rishi_conversation' 
          ? userQuery 
          : createDetailedKundaliPrompt(kundaliData, userQuery, language, analysisType);
        
        console.log('Generated prompt length:', prompt.length);
        
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: prompt
              }]
            }],
            generationConfig: {
              temperature: analysisType === 'rishi_conversation' ? 0.8 : 0.7,
              topK: analysisType === 'rishi_conversation' ? 30 : 40,
              topP: analysisType === 'rishi_conversation' ? 0.9 : 0.95,
              maxOutputTokens: analysisType === 'rishi_conversation' ? 1000 : 2048,
            },
            safetySettings: [
              {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              }
            ]
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Gemini API error:', response.status, errorText);
          throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        analysis = data.candidates?.[0]?.content?.parts?.[0]?.text;
        
        if (!analysis) {
          console.error('No analysis text received from Gemini:', data);
          throw new Error('No analysis text received from Gemini');
        }

        console.log('Gemini API response received successfully, length:', analysis.length);

      } catch (apiError) {
        console.error('Gemini API failed, using fallback:', apiError);
        analysis = generateFallbackAnalysis(kundaliData, userQuery, language, analysisType);
      }
    } else {
      console.log('No Gemini API key found, using fallback analysis');
      analysis = generateFallbackAnalysis(kundaliData, userQuery, language, analysisType);
    }

    // Cache the response (except for conversations)
    if (analysisType !== 'rishi_conversation') {
      responseCache.set(cacheKey, {
        response: analysis,
        timestamp: Date.now()
      });
    }

    // Clean old cache entries periodically
    if (responseCache.size > 200) {
      const now = Date.now();
      let cleanedCount = 0;
      for (const [key, value] of responseCache.entries()) {
        if (now - value.timestamp > CACHE_TTL) {
          responseCache.delete(key);
          cleanedCount++;
        }
      }
      console.log(`Cleaned ${cleanedCount} old cache entries`);
    }

    return new Response(JSON.stringify({ analysis }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Edge function error:', error);
    
    const language = req.headers.get('accept-language')?.includes('hi') ? 'hi' : 'en';
    
    const fallbackResponse = {
      analysis: language === 'hi' 
        ? "üôè ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è"
        : "üôè Dear child, a technical issue occurred. According to your chart, be patient and try again. The universe is with you. üïâÔ∏è"
    };

    return new Response(JSON.stringify(fallbackResponse), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createDetailedKundaliPrompt(kundaliData: any, userQuery: string, language: string, analysisType: string): string {
  const calculations = kundaliData.enhancedCalculations || {};
  const birthData = kundaliData.birthData || {};
  
  // Get current dasha information
  const currentDasha = calculations.dashas?.find(d => d.isActive);
  const activeDashas = calculations.dashas?.filter(d => d.isActive) || [];
  
  // Get active yogas with their strengths
  const activeYogas = calculations.yogas?.filter(y => y.isActive) || [];
  const strongYogas = activeYogas.filter(y => y.strength > 60);
  
  // Get planetary strengths
  const planetaryStrengths = {};
  if (calculations.planets) {
    Object.entries(calculations.planets).forEach(([planet, data]: [string, any]) => {
      if (data && typeof data.shadbala === 'number') {
        planetaryStrengths[planet] = {
          shadbala: data.shadbala,
          house: data.house,
          sign: data.rashiName,
          isExalted: data.isExalted,
          isDebilitated: data.isDebilitated,
          isRetrograde: data.isRetrograde
        };
      }
    });
  }

  const enhancedKundaliContext = `
BIRTH DETAILS: ${birthData.fullName || 'Soul'} born ${birthData.date} at ${birthData.time} in ${birthData.place}
LAGNA: ${calculations.lagna?.signName || 'Unknown'} ‡§≤‡§ó‡•ç‡§® at ${calculations.lagna?.degree?.toFixed(2) || 0}¬∞
NAKSHATRA: ${calculations.lagna?.nakshatraName || 'Unknown'}

PLANETARY POSITIONS:
${Object.entries(calculations.planets || {}).map(([planet, data]: [string, any]) => {
  if (!data) return '';
  return `${planet}: ${data.rashiName || 'Unknown'} ${data.degree?.toFixed(1) || 0}¬∞ House-${data.house || 0} ${data.isRetrograde ? '[R]' : ''} ${data.isExalted ? '[Exalted]' : data.isDebilitated ? '[Debilitated]' : ''}`;
}).filter(Boolean).join('\n')}

CURRENT DASHA PERIODS:
${activeDashas.map(d => `${d.planet}: ${d.startDate} to ${d.endDate} ${d.isActive ? '[ACTIVE]' : ''}`).join('\n')}

ACTIVE YOGAS (${activeYogas.length}):
${strongYogas.map(y => `${y.name} (${y.strength}% strength): ${y.description}`).join('\n')}

PLANETARY STRENGTHS:
${Object.entries(planetaryStrengths).map(([planet, data]: [string, any]) => 
  `${planet}: ${data.shadbala}/100 in ${data.sign} (House ${data.house})`
).join('\n')}
`;

  let systemPrompt = '';
  let enhancedPrompt = '';

  // Create analysis-type specific prompts
  if (analysisType === 'daily_horoscope') {
    systemPrompt = language === 'hi' 
      ? `‡§Ü‡§™ ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•à‡§Ç - ‡§¶‡•à‡§®‡§ø‡§ï ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•§ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Ü‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§, ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§¶‡•á‡§Ç‡•§ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¶‡§∂‡§æ ‡§ï‡§æ‡§≤, ‡§ó‡•ç‡§∞‡§π ‡§ó‡•ã‡§ö‡§∞ ‡§î‡§∞ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Ø‡•ã‡§ó‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§`
      : `You are Maharishi Parashar - daily horoscope expert. Provide detailed, personalized predictions for today based on individual Kundali data. Analyze current dasha periods, planetary transits, and active yogas.`;
    
    enhancedPrompt = `${systemPrompt}

${enhancedKundaliContext}

Today's Date: ${new Date().toLocaleDateString()}
Current Weekday: ${new Date().toLocaleDateString('en', { weekday: 'long' })}

User Request: ${userQuery}

Based on this person's ACTUAL birth chart data, current dasha periods, and planetary positions, provide a comprehensive daily horoscope with these sections:

Main Prediction: [Today's main forecast based on their chart]
Love: [Love and relationships guidance]  
Career: [Career and work insights]
Health: [Health advice based on 6th house and planetary influences]
Finance: [Financial guidance]
Lucky Numbers: [3 numbers based on their planetary positions]
Lucky Colors: [2 colors that enhance their energy today]
Lucky Direction: [Most auspicious direction]
Auspicious Time: [Best time period for important activities]
Challenges: [Potential obstacles to be aware of]
Remedies: [Specific remedies based on their chart - separate with | character]

Make predictions specific to their chart data, not generic. Use their actual planetary positions, current dasha period, and active yogas.
Respond in ${language === 'hi' ? 'Hindi' : 'English'} with warmth and practical guidance.`;

  } else if (analysisType === 'divisional_chart') {
    systemPrompt = language === 'hi' 
      ? `‡§Ü‡§™ ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§ï‡•á ‡§µ‡§ø‡§≠‡§æ‡§ó‡•Ä‡§Ø ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•á ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§ó‡§π‡§∞‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§`
      : `You are a Vedic astrology divisional chart expert. Provide deep analysis of this person's specific chart.`;
    
    enhancedPrompt = `${systemPrompt}

${enhancedKundaliContext}

User Request: ${userQuery}

Provide detailed analysis focusing on:
1. **Chart-Specific Insights** - How planets in this chart affect the life area
2. **Yoga Analysis** - Any special yogas formed in this divisional chart
3. **Planetary Dignity** - Strength/weakness of planets in this chart
4. **Practical Guidance** - Real-world implications and advice
5. **Timing** - When these influences will be most active
6. **Remedies** - Specific measures to enhance positive effects

Be specific to their actual planetary positions. Avoid generic statements.
Respond in ${language === 'hi' ? 'Hindi' : 'English'} with practical insights.`;

  } else {
    // General analysis
    systemPrompt = language === 'hi' 
      ? `‡§Ü‡§™ ‡§Æ‡§π‡§∞‡•ç‡§∑‡§ø ‡§™‡§∞‡§æ‡§∂‡§∞ ‡§π‡•à‡§Ç - ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡•§ ‡§á‡§∏ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•á ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ó‡•ç‡§∞‡§π ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ó‡§π‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¶‡•á‡§Ç‡•§`
      : `You are Maharishi Parashar - Kundali expert. Provide deep analysis based on this person's actual planetary data.`;
    
    enhancedPrompt = `${systemPrompt}

${enhancedKundaliContext}

User Request: ${userQuery}

Provide personalized insights based on their actual chart data. Be specific and practical.
Respond in ${language === 'hi' ? 'Hindi' : 'English'} with loving guidance.`;
  }

  return enhancedPrompt;
}

// Enhanced fallback analysis based on actual Kundali data
function generateFallbackAnalysis(kundaliData: any, userQuery: string, language: string, analysisType: string): string {
  const calculations = kundaliData.enhancedCalculations || {};
  const currentDasha = calculations.dashas?.find(d => d.isActive);
  const activeYogas = calculations.yogas?.filter(y => y.isActive) || [];
  const lagna = calculations.lagna;
  
  if (analysisType === 'rishi_conversation') {
    return generateRishiConversationFallback(calculations, currentDasha, language, userQuery);
  } else if (analysisType === 'daily_horoscope') {
    return generateDailyHoroscopeFallback(calculations, currentDasha, activeYogas, language);
  } else if (analysisType === 'divisional_chart') {
    return generateDivisionalChartFallback(calculations, language, userQuery);
  } else {
    return generateGeneralFallback(calculations, currentDasha, language);
  }
}

function generateRishiConversationFallback(calculations: any, currentDasha: any, language: string, userQuery: string): string {
  if (language === 'hi') {
    return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® "${userQuery}" ‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡•Å‡§®‡§æ ‡§π‡•à‡•§ ${calculations.lagna?.signName ? `‡§Ü‡§™‡§ï‡§æ ${calculations.lagna.signName} ‡§≤‡§ó‡•ç‡§®` : '‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä'} ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§ï‡§π ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ${currentDasha ? `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ${currentDasha.planet} ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§á‡§∏ ‡§∏‡§Æ‡§Ø'} ‡§Ü‡§™‡§ï‡•ã ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ 

‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡•ç‡§Æ‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§õ‡•Å‡§™‡§æ ‡§π‡•à‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§™‡•ç‡§∞‡§æ‡§∞‡•ç‡§•‡§®‡§æ, ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§î‡§∞ ‡§¶‡§æ‡§®-‡§™‡•Å‡§£‡•ç‡§Ø ‡§ï‡§∞‡•á‡§Ç‡•§ ${calculations.yogas?.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§` : '‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡§Ç‡•§'}

‡§Æ‡•á‡§∞‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§∏‡§¶‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è`;
  } else {
    return `üôè Dear child, I have heard your question "${userQuery}". Looking at your ${calculations.lagna?.signName ? `${calculations.lagna.signName} ascendant` : 'birth chart'}, I can say that ${currentDasha ? `in the current ${currentDasha.planet} dasha` : 'at this time'} you need patience and positive thoughts.

The solution to your problem lies in your actions. Practice regular prayer, meditation, and charity. ${calculations.yogas?.length > 0 ? 'You have auspicious yogas in your chart that will help you.' : 'The cosmic forces are with you.'}

My blessings are always with you. üïâÔ∏è`;
  }
}

function generateDailyHoroscopeFallback(calculations: any, currentDasha: any, activeYogas: any[], language: string): string {
  const today = new Date().toLocaleDateString();
  const weekday = new Date().toLocaleDateString('en', { weekday: 'long' });
  
  if (language === 'hi') {
    return `üôè ‡§Æ‡•á‡§∞‡•á ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§ú ${today} (${weekday}) ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§¶‡§ø‡§® ‡§π‡•à‡•§

Main Prediction: ${currentDasha ? `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ${currentDasha.planet} ‡§Æ‡§π‡§æ‡§¶‡§∂‡§æ ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à` : '‡§Ü‡§™‡§ï‡•Ä ‡§¶‡§∂‡§æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§π‡•à'}‡•§ ${activeYogas.length > 0 ? `‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§Æ‡•á‡§Ç ${activeYogas.length} ‡§∂‡•Å‡§≠ ‡§Ø‡•ã‡§ó ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç‡•§` : '‡§ß‡•à‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§Æ‡•á‡§π‡§®‡§§ ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§≤‡•á‡§Ç‡•§'}

Love: ‡§Ü‡§ú ‡§Ü‡§™‡§ï‡•á ‡§∞‡§ø‡§∂‡•ç‡§§‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§Æ‡§Ç‡§ú‡§∏‡•ç‡§Ø ‡§∞‡§π‡•á‡§ó‡§æ‡•§ ${calculations.lagna?.signName === 'Libra' ? '‡§§‡•Å‡§≤‡§æ ‡§≤‡§ó‡•ç‡§® ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§Ü‡§™ ‡§∏‡•ç‡§µ‡§æ‡§≠‡§æ‡§µ‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§π‡•à‡§Ç‡•§' : '‡§™‡•ç‡§∞‡•á‡§Æ ‡§Æ‡•á‡§Ç ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç‡•§'}

Career: ${currentDasha?.planet === 'JU' ? '‡§ó‡•Å‡§∞‡•Å ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•à‡•§' : '‡§Æ‡•á‡§π‡§®‡§§ ‡§ï‡§æ ‡§´‡§≤ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§'} ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•ã‡§ö-‡§∏‡§Æ‡§ù‡§ï‡§∞ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§Ç‡•§

Health: ‡§Ü‡§ú ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç‡•§ ${calculations.lagna?.signName === 'Virgo' ? '‡§ï‡§®‡•ç‡§Ø‡§æ ‡§≤‡§ó‡•ç‡§® ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§Ü‡§™ ‡§∏‡•ç‡§µ‡§æ‡§≠‡§æ‡§µ‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§ö‡•á‡§§ ‡§π‡•à‡§Ç‡•§' : '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç‡•§'}

Finance: ‡§Ü‡§ú ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä ‡§¨‡§∞‡§§‡•á‡§Ç‡•§ ${currentDasha?.planet === 'JU' ? '‡§ó‡•Å‡§∞‡•Å ‡§ï‡•Ä ‡§ï‡•É‡§™‡§æ ‡§∏‡•á ‡§≤‡§æ‡§≠ ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•à‡•§' : '‡§ñ‡§∞‡•ç‡§ö ‡§™‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§∞‡§ñ‡•á‡§Ç‡•§'}

Lucky Numbers: 3,7,9
Lucky Colors: ‡§®‡•Ä‡§≤‡§æ,‡§π‡§∞‡§æ
Lucky Direction: ‡§™‡•Ç‡§∞‡•ç‡§µ
Auspicious Time: ‡§∏‡•Å‡§¨‡§π 6-8 ‡§¨‡§ú‡•á
Challenges: ‡§Æ‡§æ‡§Æ‡•Ç‡§≤‡•Ä ‡§¶‡•á‡§∞‡•Ä ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•à, ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç‡•§
Remedies: ‡•ê ‡§®‡§Æ‡§É ‡§∂‡§ø‡§µ‡§æ‡§Ø ‡§ï‡§æ ‡§ú‡§™ ‡§ï‡§∞‡•á‡§Ç|‡§ú‡§∞‡•Ç‡§∞‡§§‡§Æ‡§Ç‡§¶‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡•ã‡§ú‡§® ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç|‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§¶‡•Ä‡§™‡§ï ‡§ú‡§≤‡§æ‡§è‡§Ç

‡§Æ‡•á‡§∞‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è`;
  } else {
    return `üôè Dear child, today ${today} (${weekday}) is a special day for you.

Main Prediction: ${currentDasha ? `Currently running ${currentDasha.planet} Mahadasha` : 'Your dasha period is favorable'}. ${activeYogas.length > 0 ? `You have ${activeYogas.length} beneficial yogas active in your chart.` : 'Work with patience and dedication.'}

Love: Harmony in relationships today. ${calculations.lagna?.signName === 'Libra' ? 'Being a Libra ascendant, you naturally bring balance.' : 'Be patient in love matters.'}

Career: ${currentDasha?.planet === 'JU' ? 'Jupiter dasha brings career growth opportunities.' : 'Hard work will bring results.'} Make thoughtful decisions in financial matters.

Health: Take special care of your health today. ${calculations.lagna?.signName === 'Virgo' ? 'Being a Virgo ascendant, you are naturally health-conscious.' : 'Maintain a balanced diet.'}

Finance: Be cautious in financial matters today. ${currentDasha?.planet === 'JU' ? 'Jupiter\'s grace may bring profits.' : 'Control your expenses.'}

Lucky Numbers: 3,7,9
Lucky Colors: Blue,Green
Lucky Direction: East
Auspicious Time: 6-8 AM
Challenges: Minor delays possible, stay patient.
Remedies: Chant Om Namah Shivaya|Donate food to needy|Light a lamp in evening

My blessings are with you. üïâÔ∏è`;
  }
}

function generateDivisionalChartFallback(calculations: any, language: string, userQuery: string): string {
  if (language === 'hi') {
    return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§ï‡•á ‡§µ‡§ø‡§≠‡§æ‡§ó‡•Ä‡§Ø ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® "${userQuery}" ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ${calculations.lagna?.signName ? `‡§Ü‡§™‡§ï‡§æ ${calculations.lagna.signName} ‡§≤‡§ó‡•ç‡§®` : '‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä'} ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§µ‡§ø‡§≠‡§æ‡§ó‡•Ä‡§Ø ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§Æ‡•à‡§Ç ‡§ï‡§π ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•á ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ó‡§π‡§∞‡•Ä ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§ üïâÔ∏è`;
  } else {
    return `üôè Dear child, your question "${userQuery}" about divisional charts is important. Based on your ${calculations.lagna?.signName ? `${calculations.lagna.signName} ascendant` : 'main chart'}, divisional chart analysis provides deep insights into specific life areas. Stay patient and continue positive actions. üïâÔ∏è`;
  }
}

function generateGeneralFallback(calculations: any, currentDasha: any, language: string): string {
  if (language === 'hi') {
    return `üôè ‡§™‡•Å‡§§‡•ç‡§∞, ${calculations.lagna?.signName ? `‡§Ü‡§™‡§ï‡§æ ${calculations.lagna.signName} ‡§≤‡§ó‡•ç‡§®` : '‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä'} ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•à‡§Ç ‡§ï‡§π ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ${currentDasha ? `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ${currentDasha.planet} ‡§¶‡§∂‡§æ ‡§Æ‡•á‡§Ç` : '‡§á‡§∏ ‡§∏‡§Æ‡§Ø'} ‡§Ü‡§™‡§ï‡•ã ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•á ‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ñ-‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø ‡§Ü‡§è‡§ó‡•Ä‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§™‡•Ç‡§ú‡§æ-‡§™‡§æ‡§† ‡§î‡§∞ ‡§∏‡•á‡§µ‡§æ ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡•§ ‡§Æ‡•á‡§∞‡§æ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•à‡•§ üïâÔ∏è`;
  } else {
    return `üôè Dear child, looking at your ${calculations.lagna?.signName ? `${calculations.lagna.signName} ascendant` : 'birth chart'}, I can say that ${currentDasha ? `in the current ${currentDasha.planet} dasha` : 'at this time'} you need patience and positive thoughts. Happiness and prosperity will come into your life. Continue regular worship and service. My blessings are with you. üïâÔ∏è`;
  }
}
